<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>bathompso.com</title>
    <description></description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 26 Aug 2017 08:50:08 -0700</pubDate>
    <lastBuildDate>Sat, 26 Aug 2017 08:50:08 -0700</lastBuildDate>
    <generator>Jekyll v3.5.0</generator>
    
      <item>
        <title>Unlimited Coding Practice Courtesy of FiveThirtyEight</title>
        <description>&lt;p&gt;One of the hardest things about learning coding is the fact that there isn&amp;#39;t a large base of fairly easy coding questions that let you learn a ton by doing, instead of reading enough books and other materials to tackle more challenging word problems. When asked by several friends to recommend methods of getting into Data Science, I always recommend learning how to code by &lt;em&gt;doing&lt;/em&gt; rather than reading, however that&amp;#39;s a difficult thing to do without any stand-out resources.&lt;/p&gt;

&lt;p&gt;Well fret no more, as I&amp;#39;ve found a solid source of word problems that will get you rolling with even just a minimal amount of code knowledge: &lt;a href=&quot;https://fivethirtyeight.com/tag/the-riddler/&quot;&gt;FiveThirtyEight&amp;#39;s &amp;quot;The Riddler&amp;quot; puzzles&lt;/a&gt;. FiveThirtyEight is all about math and stats, so they have a weekly post that challenges people to solve some complex word problems with math. Take this example problem:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Imagine that it’s the beginning of time, and the Supreme Court’s nine seats are empty. Assume further that seats on the bench are filled only if the same party controls both the presidency and the Senate. Every election, each of the two parties has a 50 percent chance of gaining control of the executive or legislative branch. Outcomes of the elections are independent, and the length of time for which a justice serves is uniformly distributed between zero and 40 years. What is the expected number of vacancies on the bench in the long run?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is a fairly complex problem to solve flat-out with math, especially for me who, although a math major in undergrad, has let a lot of that knowledge get pushed out of my brain. Instead of slogging through the math to try and come up with a solution, this is a pretty straightforward problem to solve via simulation. It actually requires very little advanced coding knowledge, yet should be challenging enough to a new coder to force you to learn some new techniques and increase your familiarity with coding.&lt;/p&gt;

&lt;p&gt;Below is my walkthrough of the latest &amp;quot;The Riddler&amp;quot; Classic puzzle via simulation, just to show how I approach simulation of one of these types of questions. This type of approach isn&amp;#39;t something that will get you mentioned on the blog, but it does give you many beginner-level coding problems that will help you to advance your skills and challenge some of the harder word problems you normally see in &amp;quot;learn to code&amp;quot; classes elsewhere.&lt;/p&gt;

&lt;iframe id=&quot;jupyter&quot; src=&quot;/jupyter/riddler_2017_05_09.html&quot; width=&quot;100%&quot;  frameborder=&quot;0&quot; scrolling=&quot;no&quot; onload=&quot;$('#jupyter').contents().find('.prompt').hide(); resizeIframe(this)&quot;&gt;&lt;/iframe&gt;
</description>
        <pubDate>Tue, 09 May 2017 00:00:00 -0700</pubDate>
        <link>http://localhost:4000/blog/riddler-1/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/riddler-1/</guid>
        
        <category>Data Science</category>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Hidden Tips For Transitioning From Academia To Data Science</title>
        <description>&lt;p&gt;I&amp;#39;m hardly alone in my path from academia into the world of data science, which means there exist a multitude of guides and &lt;a href=&quot;http://tommyblanchard.com/how-to-make-the-transition-from-academia-to-data-science&quot;&gt;blog posts&lt;/a&gt; explaining the steps you need to take to also make the transition. Most focus on how to transition skills gained via a Ph.D. into those &amp;quot;necessary&amp;quot; for work in data science, or how to improve your coding. These are definitely useful comments (and I&amp;#39;ll list out some more conventional ones as well), but there are some questions that I almost never see in these guides that I think are absolutely necessary to answer before attempting any transition.&lt;/p&gt;

&lt;p&gt;First, I&amp;#39;ll get my list of &amp;quot;known&amp;quot; transition tips out of the way:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Learn a coding language.&lt;/strong&gt; This one is obvious, and most Ph.D. students are hopefully familiar with a language like Python or R via their research. If not, there are many good textbooks and MOOCs to teach you how to code. Spend a few weeks to get to a basic level of proficiency, and then continue to improve your skills by writing programs to help with your research, or just for fun. I built a mobile game &lt;a href=&quot;https://github.com/bathompso/letterpress-solver&quot;&gt;&amp;quot;cheat&amp;quot; app&lt;/a&gt; in Python to practice when I was still improving my Python abilities, and learned a ton by Googling syntax the entire time. Don&amp;#39;t worry about going deep into optimizations of the language, just work on the basic problem of coding: translating a complex word problem into small steps that can be handled by code.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Know your basic statistics.&lt;/strong&gt; Brush up on z- and t-tests, and know what ANOVA is. Honestly, stats knowledge is not as necessary as most transition guides make it out to be, as the most stats that a data scientist will have to know will be to validate experimental A/B test results, or spot when a stats &lt;em&gt;faux pas&lt;/em&gt; has occurred. Beyond that, you really don&amp;#39;t need to be a wizard at stats, and I wouldn&amp;#39;t spend a ton of time on the subject.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Know basic machine learning techniques.&lt;/strong&gt; ML is another area that guides seem to believe you need a deep knowledge on, but this really depends on roles you&amp;#39;re interested in. If you&amp;#39;re going into a role that will be developing ML solutions (i.e. coding these solutions up and slowly improving them), then by all means start digging through &lt;a href=&quot;https://www.amazon.com/Elements-Statistical-Learning-Prediction-Statistics/dp/0387848576/ref=sr_1_1?ie=UTF8&amp;qid=1493101408&amp;sr=8-1&amp;keywords=elements+of+statistical+learning&quot;&gt;dense books&lt;/a&gt; and learning these algorithms from first principles. For most other data scientists, however, you&amp;#39;ll just be applying pre-defined techniques in &lt;em&gt;scikit-learn&lt;/em&gt;, and don&amp;#39;t need to know the nitty gritty details of loss functions, gradient descent, and other buzzwords. You should, however, know the high-level concepts of how each ML technique works (linear regression, logistic regression, decision trees, SVMs, random forests, k-mean clustering, to name a few), and more importantly, &lt;em&gt;know the assumptions&lt;/em&gt; of each model. Know what heteroscedasticity means.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Learn SQL.&lt;/strong&gt; While not a &amp;quot;real&amp;quot; programming language, SQL is an absolute necessity of any data scientist toolkit. There are a number of free tutorials on SQL, with practice questions, to get you up to speed. SQL is a pretty easy language, so if you know any others (as you should per the first tip in this list), SQL should come to you without any real problems.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;&amp;quot;But Ben, why don&amp;#39;t you suggest I become an expert in any of the above topics?&amp;quot;&lt;/em&gt; The answer is that no data science job, especially one considering you fresh out of academia, would expect you to be an expert in anything, and it&amp;#39;s unrealistic to expect that even after a few months of studying. Coding, and data science in general, is something you learn by &lt;em&gt;doing&lt;/em&gt;, and so you can only get better when you get into a job and actually use these skills on a day-to-day basis.&lt;/p&gt;

&lt;p&gt;In fact, what you should sell in a cover letter or interview for a data science position shouldn&amp;#39;t be your domain knowledge in these subject areas, but the fact that you are a Ph.D. One of the most valuable skills of a data scientist is being able to work independently on a complex problem, and be self-sufficient enough to work around problems that arise. These are basic principles of a Ph.D. research project, so anyone reading this guide should have no problem with that. When I evaluate candidates, I don&amp;#39;t really care about years of experience, but instead I look at what projects they accomplished. If they have a track record of delivering solutions to complex problems, I know they can learn the necessary coding, stats, ML, or SQL if they currently don&amp;#39;t know it.&lt;/p&gt;

&lt;h2&gt;What other guides won&amp;#39;t tell you.&lt;/h2&gt;

&lt;p&gt;Now to the lesser-talked-about necessities of a transition. While the above tips (and most you&amp;#39;ll see other places) focus on things you can learn or do during the transition, there are a number of things required in a data scientist that aren&amp;#39;t as easily learned from a book.&lt;/p&gt;

&lt;h3&gt;Communication&lt;/h3&gt;

&lt;p&gt;In academia, you&amp;#39;re surrounded by others very similar to you. When you go to a conference or talk, everyone there presumably &amp;quot;speaks the same language&amp;quot; and you can go deep into technical jargon without being too worried about putting off the audience. In industry this is often not the case. In my job, I interface directly with non-technical people all the time, and it&amp;#39;s up to me to distill my analysis and models into understandable terms to communicate my findings. Delivering quality reports is one of the most-necessary skills for a data scientist, and candidates without those skills will have a tough time passing interviews for most DS positions.&lt;/p&gt;

&lt;p&gt;The problem here is that it&amp;#39;s difficult to learn better communication and speaking habits from books, but instead must be practiced. So if you are still in your Ph.D., take every opportunity you have to speak at conferences to practice. Also try and speak within your department, taking time to distill your complex research project and findings to an undergraduate level. When you&amp;#39;re done with the talk, ask the undergrads whether they understood everything, and slowly improve your presentation via their feedback. If you can communicate your findings to them, you&amp;#39;ll be pretty close to having the skills necessary to translate your ML and analysis results to project managers and executives in an industry role.&lt;/p&gt;

&lt;h3&gt;Timelines&lt;/h3&gt;

&lt;p&gt;Another huge difference (which can often be a selling point to some people) is the vastly different timelines between academia and industry. In academia, you focus multiple years of work into a singular project, often with months of largely no progress while you work on gathering data or increasing the performance of various tests or algorithms. In industry, you&amp;#39;re at almost the other side of the spectrum, having to juggle multiple projects on very short turn-arounds.&lt;/p&gt;

&lt;p&gt;Because of this, you&amp;#39;re often having to iterate quickly to a 70% solution, and unable to wrangle the time to improve it to the 100% solution. Early in my data science career, I was juggling two to three projects at a time, often on a days-to-weeks timescale. This was an abrupt change, and required quick and dirty solutions I was not accustomed to during my Ph.D. It was difficult at first to accept that this was the &amp;quot;quality&amp;quot; of work I was putting out, but I slowly came to terms with it. I have adjusted accordingly and now function fine within these confines, but forsaking the &amp;quot;true academic&amp;quot; tendency to put out a perfect solution is something you have to make sure you&amp;#39;re prepared for.&lt;/p&gt;

&lt;p&gt;While this type of work environment isn&amp;#39;t something you can easily understand beforehand, I&amp;#39;ve attempted to come up with a way to &amp;quot;simulate&amp;quot; what this would be like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Find two datasets on &lt;a href=&quot;https://www.kaggle.com/datasets&quot;&gt;Kaggle&lt;/a&gt; that interest you, and define a business problem you want to solve with each.&lt;/strong&gt; Some datasets already have apparent business questions they can answer, like &lt;a href=&quot;https://www.kaggle.com/tiredgeek/predict-bo-trial&quot;&gt;this dataset&lt;/a&gt; that asks &amp;quot;Can you predict product backorders?&amp;quot; For those datasets which don&amp;#39;t have immediate business questions created, try and think of a business that might produce this data for you, and why they might want a data scientist to analyze it.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Take a weekend and fully answer both questions.&lt;/strong&gt; Give yourself two full days to fully analyze both problems. Download and clean the data, do some exploratory analysis, and build a model (if necessary for the business case). Focus your efforts on solving the business case, and delivering a solution to the question you asked in Step 1.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Write blog posts explaining your methodology and results.&lt;/strong&gt; Why did you choose the model type that you did? What should the business learn from the data? What would the next steps be for the business on this project? Utilize some of the plots you generated during your data exploration phase. These blog posts should also be completely written in the weekend you&amp;#39;re doing the data work (which will make the time go by a bit faster).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;At the end of the weekend, post both blog posts online.&lt;/strong&gt; Everything is on the honor system, but no matter far you got on both questions, post your analysis code and blogs online at the end of the weekend. Send it to some friends and get their feedback on how well you communicated everything, and whether you justified your analysis choices clearly enough. Think about how you feel about the quality of work you did in the amount of time allotted. Did you spend too much time on one question, and not enough on the other? Did you feel like both problems were rushed? What would you improve if you had another two days?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Two full Kaggle datasets in two days is &lt;em&gt;hard&lt;/em&gt;, and I doubt you&amp;#39;ll get to a perfect solution you can be happy with for both, but that&amp;#39;s fine. While most DS jobs will have longer timescales than one day, this simulates some of the stress and time-management that you&amp;#39;ll encounter in an industry role, and figuring out how you handle it is important in determining whether you&amp;#39;ll be happy in data science. If you found yourself unhappy that you couldn&amp;#39;t spend the entire weekend (and the following weekend) on one of these projects because you found it super interesting and wanted to improve your model performance, then you might need to come to terms with whether you&amp;#39;ll be happy when industry timelines come to crash your party. There are certainly more &amp;quot;academic&amp;quot; timescale DS positions, and knowing what type of work culture you&amp;#39;re able to thrive in is important as you start looking for opportunities.&lt;/p&gt;

&lt;h3&gt;Expectations&lt;/h3&gt;

&lt;p&gt;Everyone coming to data science transition guides seem to assume that they&amp;#39;ll be happy in data science, but that&amp;#39;s not necessarily the case. While data science is the hot industry right now, and many people become lured in by the promise of working on cool machine learning or AI problems, a vast majority of DS roles don&amp;#39;t focus much of their time on those things. Lots of DS projects are more product analytics focus, which requires mining various data sources to determine user behavior, or detect trends via simple heuristics. These types of investigations can sometimes be intellectually rewarding and impactful, but aren&amp;#39;t necessarily earth-shattering in their complexity.&lt;/p&gt;

&lt;p&gt;Even in a ML project, only a small amount of time is actually spent training the model, but instead invested in data cleaning, exploration and iterative feature engineering. This work is arduous and tedious, but is absolutely necessary for moving onto the &amp;quot;fun&amp;quot; parts. The problem with learning data science via kaggle datasets and competitions is that the data is usually already cleaned for you, and the number of features fairly small. In practice, the data is much messier and feature space near limitless.&lt;/p&gt;

&lt;p&gt;At Uber, I work with billions of mobile app events coming in every day, and have to distill this waterfall of data into a smaller bucket of features that relate to the project at hand. This requires days of SQL writing to clean and transform the data into a large number of possibly-related features, a few hours of sanity-checking these pipelines to ensure the data makes sense, and then a few more hours of slowly iterating from a huge feature list into only a few impactful ones. After I&amp;#39;ve built my model, it&amp;#39;s spending another hour or two writing up everything and distilling it into a presentation or document outlining the entire process, and what learnings we can take from it (even if it&amp;#39;s just a black-box model we deploy to production). While this may be a week or two of work, only a very small slice of it is spent dealing with differing models or advanced tech explorations.&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I don&amp;#39;t want to be a downer, because data science can be a very interesting field, and I&amp;#39;m extremely happy I transitioned from academia. However, leaving academia because you&amp;#39;re unhappy to go into an industry where you&amp;#39;re equally as unhappy isn&amp;#39;t a good solution either. Most guides focus on what you can &lt;em&gt;learn&lt;/em&gt;, but I also think they should focus on what you can &lt;em&gt;expect&lt;/em&gt;. My best advice beyond the Kaggle time crunch challenge above is to seek out friends or others who have interesting business data, but no analyst, and tell them you want to give them free DS work. Do an actual project, with an actual client, and see whether you enjoy the intellectual challenge. If you do, then most likely you can find a role in DS that you will enjoy and be happy in. If you don&amp;#39;t like it, then try and see whether there are roles that only have aspects of the project you did enjoy, or perhaps re-think whether data science is the right career path for you.&lt;/p&gt;

&lt;p&gt;Any other &amp;quot;hidden&amp;quot; tips you&amp;#39;d want to share with other academics looking to transition? Let me know in the comments.&lt;/p&gt;
</description>
        <pubDate>Mon, 24 Apr 2017 00:00:00 -0700</pubDate>
        <link>http://localhost:4000/blog/hidden-transition-tips/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/hidden-transition-tips/</guid>
        
        <category>Data Science</category>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Setting Up Flask on AWS</title>
        <description>&lt;p&gt;&lt;em&gt;I recently completed the &lt;a href=&quot;http://insightdatascience.com&quot;&gt;Insight Data Science&lt;/a&gt; program, which involved the creation of a data science project from ideation through deployment (if interested, you can see my Insight project &lt;a href=&quot;http://respawninto.bathompso.com&quot;&gt;here&lt;/a&gt;). For deployment, a &lt;a href=&quot;http://flask.pocoo.org&quot;&gt;Flask webapp&lt;/a&gt; was created, and Amazon Web Services (AWS) was used to host it. I found that getting this all set up was one of the hardest things for fellows to accomplish, and recognized a few areas in which it could be improved.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The instructions below are an attempt to improve the instructions for getting a Flask webapp up and running on AWS. While I assume no prior knowledge of Flask, I do no go into any Flask basics here, but that may be a blog post for the future. I will try to go slowly through the steps, and offer plentiful code examples and screenshots. This guide will hopefully serve as a better reference for future Insight sessions.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Creating an AWS Instance&lt;/h2&gt;

&lt;p&gt;First, we must create an AWS virtual machine to copy our files to, and serve our website. To get started, head to &lt;a href=&quot;http://aws.amazon.com&quot;&gt;aws.amazon.com&lt;/a&gt; and click the sign up button in the top right. Then, follow the steps to either sign into your existing Amazon.com account, or create a new one.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/generated/aws_flask/start_page-940x408-5779e3.png&quot; class=&quot;blogtextimg&quot; width=&quot;100%&quot; &gt;&lt;/p&gt;

&lt;p&gt;Unfortunately, I already went through the signup process, so I could not recreate some of the screens. I know you will have to enter your credit card information, but don&amp;#39;t worry, we will only be using the free AWS tier, so you will not be charged. I believe AWS will also ask you what region you want your servers to be in. For convenience, select one of the western US options (I chose Oregon).&lt;/p&gt;

&lt;p&gt;After completing signup, you will be presented with the AWS console screen, with all the products AWS has to offer. What we want to select is EC2, or Elastic Compute Cloud, the first option in the top left.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/generated/aws_flask/console-940x302-25fa0f.png&quot; class=&quot;blogtextimg&quot; width=&quot;100%&quot; &gt;&lt;/p&gt;

&lt;p&gt;After selecting EC2, you will be presented with the EC2 console screen, which can also be overwhelming with the number of options to choose from. To get started, select the &amp;quot;Instances&amp;quot; tab on the left sidebar (under the Instances subheader), which will take you to the following screen:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/generated/aws_flask/instances-940x371-79618d.png&quot; class=&quot;blogtextimg&quot; width=&quot;100%&quot; &gt;&lt;/p&gt;

&lt;p&gt;I already have an instance created for my project, but the list you will see will be empty. Press the blue &amp;quot;Launch Instance&amp;quot; button to set up a new virtual machine for your project. You will immediately be asked to select an operating system, and you should select the &amp;quot;Ubuntu Server&amp;quot; option. As of this writing, the current version is 14.04, but these instructions should still work on future versions.&lt;/p&gt;

&lt;p&gt;Next, you will select what type of instance you wish to create. For the free tier, there is only 1 option available, but there are many beefier virtual machines you could create if you wish to pay for the performance.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/generated/aws_flask/instance_type-940x422-3a4f4d.png&quot; class=&quot;blogtextimg&quot; width=&quot;100%&quot; &gt;&lt;/p&gt;

&lt;p&gt;Continue through the setup, just clicking the blue continue buttons, until you reach the review step. At this stage, AWS will ask you to create a &amp;quot;key pair,&amp;quot; that you will use to SSH into your instance.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/generated/aws_flask/key_pair-719x537-848b59.png&quot; class=&quot;blogtextimg&quot; &gt;&lt;/p&gt;

&lt;p&gt;Give it any name you wish (&amp;quot;aws&amp;quot; might be a good name), and click the &amp;quot;Download Key Pair&amp;quot; button. This will download a text file which contains the SSH key necessary to access the instance. &lt;strong&gt;Make sure to back this key file up!&lt;/strong&gt; If you ever lose your key file, you will not be able to enter your instance. Your data will be recoverable, but it will be hassle, and should be avoided at all costs.&lt;/p&gt;

&lt;p&gt;Once the key is downloaded, click the &amp;quot;Launch Instances&amp;quot; button, which should now be available.&lt;/p&gt;

&lt;h2&gt;Setting Up SSH&lt;/h2&gt;

&lt;p&gt;Before we worry about setting our files up on the instance, we should make sure we have easy access to log into the machine.&lt;/p&gt;

&lt;p&gt;First, we need to determine where our virtual machine is. To find your instance&amp;#39;s IP address, click back to the &amp;quot;Instances&amp;quot; tab, and select your instance. In the bottom right will list the IP address of the machine:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/generated/aws_flask/instance_ip-940x735-e6bf36.png&quot; class=&quot;blogtextimg&quot; width=&quot;100%&quot; &gt;&lt;/p&gt;

&lt;p&gt;We can now use this IP address to log in via SSH. Normally, the login requires a lengthy SSH command:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;div class=&quot;shell&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ssh -i ~/Downloads/keyfile.pem ubuntu@ip.address.here&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;These commands get even more unwieldy when you try to copy files with &lt;code&gt;scp&lt;/code&gt; or create port tunnels (more on that later). To simplify all future steps, we will create an SSH alias.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Within your home folder is a hidden directory, &lt;code&gt;.ssh&lt;/code&gt;. Within this directory are all the configuration files for SSH connections. As a first step, copy your downloaded &lt;code&gt;*.pem&lt;/code&gt; file to the &lt;code&gt;~/.ssh&lt;/code&gt; directory. &lt;em&gt;Note: on a Mac, the key is sometimes downloaded as a &lt;code&gt;.pem.txt&lt;/code&gt; file. Remove the &lt;code&gt;.txt&lt;/code&gt; extension before copying.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We will also need to change the permissions of the downloaded &lt;code&gt;*.pem&lt;/code&gt; file. The key must be unreadable by other users in order to be considered; if it is readable by others it may pose a security risk. To alter the permissions, use the &lt;code&gt;chmod&lt;/code&gt; function: 
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;div class=&quot;shell&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;chmod &lt;span class=&quot;m&quot;&gt;600&lt;/span&gt; ~/.ssh/keyfile.pem&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now that the key file is in the right location, and with the right permissions, we can create our alias. to do this, we want to edit the &lt;code&gt;~/.ssh/config&lt;/code&gt; file, which may or may not already exist on your system. Simply run &lt;code&gt;emacs ~/.ssh/config&lt;/code&gt; (or another editor of your choice) to create / edit the file. Add the following entry, substituting the IP address of your instance, and the exact name of your key file:
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;div class=&quot;shell&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Host aws
    HostName &lt;span class=&quot;m&quot;&gt;52&lt;/span&gt;.11.150.208
    User ubuntu
    Port &lt;span class=&quot;m&quot;&gt;22&lt;/span&gt;
    IdentityFile ~/.ssh/aws.pem&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Once the steps are complete, open a new terminal window, and you should be able to access your machine via the simple command:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;div class=&quot;shell&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ssh aws&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If this command fails for any reason, double check you completed steps 1 and 2, or troubleshoot the given error (perhaps you entered the wrong name for your keyfile, etc.). Once you can log into your machine, we can proceed.&lt;/p&gt;

&lt;h2&gt;Setting Up The Instance&lt;/h2&gt;

&lt;p&gt;When you enter the instance, it is essentially a blank slate: only a bare-bones Python installation, no packages, and no Flask. We will install the basic components necessary to get a dummy Flask app running before copying over any completed project you may have working locally.&lt;/p&gt;

&lt;p&gt;Python is already installed, but none of the add-on packages. We will want to speed up this process with &lt;code&gt;pip&lt;/code&gt;. It can be installed via:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;div class=&quot;shell&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get update
sudo apt-get install python-pip&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;These commands will do a &lt;em&gt;bunch&lt;/em&gt; of things, and exit with &lt;code&gt;pip&lt;/code&gt; now installed for use. Next, we will install Flask to get our bare-bones dummy example working&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;div class=&quot;shell&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo pip install flask&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;code&gt;$PYTHONPATH&lt;/code&gt; variable seems to get unset randomly, and causes errors for later steps. To avoid this, add the following line to the top of your &lt;code&gt;~/.bashrc&lt;/code&gt; file:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;div class=&quot;shell&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;PYTHONPATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;/usr/lib/python2.7:/usr/lib/python2.7/plat-x86_64-linux-gnu:/usr/lib/python2.7/lib-tk:/usr/lib/python2.7/lib-old:/usr/lib/python2.7/lib-dynload:/usr/local/lib/python2.7/dist-packages:/usr/lib/python2.7/dist-packages:/usr/lib/python2.7/dist-packages/PILcompat&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2&gt;Creating a Dummy Flask App&lt;/h2&gt;

&lt;p&gt;To create a dummy Flask app, you will need to run the following commands to create the directory structure:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;div class=&quot;shell&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir dummyapp
mkdir dummyapp/app
mkdir dummyapp/app/static
mkdir dummyapp/app/templates&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This will create a folder, &lt;code&gt;dummyapp&lt;/code&gt;, which will contain all the pieces of our dummy Flask application. A similar process can be followed to put your project webapp into a single folder.&lt;/p&gt;

&lt;p&gt;Next, we will create the necessary python and HTML files for our skeleton app. Remember, to create any file, simply run &lt;code&gt;emacs [filename]&lt;/code&gt;, or any other command line text editor. The names of the following files will be the first line of the code, in a comment:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;div class=&quot;pyfile&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# dummyapp/app/__init__.py&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;flask&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Flask&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Flask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vm&quot;&gt;__name__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;views&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;div class=&quot;pyfile&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# dummyapp/app/views.py&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;flask&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;render_template&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@app.route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;returnDict&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;returnDict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;user&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Ben&amp;#39;&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# Feel free to put your name here!&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;returnDict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Home&amp;#39;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;render_template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;index.html&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;returnDict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;div class=&quot;pyfile&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- dummyapp/app/templates/index.html --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;{{ title }} - microblog&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;Hello, {{ user }}!&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;div class=&quot;pyfile&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Once all the files are in place, you should be able to run the app with &lt;code&gt;python run.py&lt;/code&gt; from the main &lt;code&gt;~/dummyapp/&lt;/code&gt; folder. However, the default port 5000 is blocked, so you won&amp;#39;t be able to see it from the outside. To do this, logout of the virtual machine and create a port tunnel &lt;em&gt;from your local machine&lt;/em&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;div class=&quot;shell&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ssh -L &lt;span class=&quot;m&quot;&gt;5000&lt;/span&gt;:localhost:5000 aws&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This command takes port 5000 on your local machine, &lt;code&gt;localhost&lt;/code&gt;, and binds it to port 5000 on &lt;code&gt;aws&lt;/code&gt;. It also SSH&amp;#39;s to &lt;code&gt;aws&lt;/code&gt; so that you can run the dummy Flask app from there. Running it this time, and navigating your browser to &lt;code&gt;localhost:5000&lt;/code&gt; should give you the &amp;quot;Hello [Name]&amp;quot; message, and you should see a line print in your terminal from a generic &lt;code&gt;GET&lt;/code&gt; command. Once you&amp;#39;ve verified the dummy app is working, we can move onto making it persistent.&lt;/p&gt;

&lt;h2&gt;Installing Nginx&lt;/h2&gt;

&lt;p&gt;To keep our Flask app running constantly and make sure it can serve a decent number of concurrent users, we will use Nginx, a webserver. It will handle passing traffic from your instance to the Flask web process. To install it, simply run:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;div class=&quot;shell&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install nginx&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Once installed, the webserver is automatically running. To check whether it&amp;#39;s working, we&amp;#39;ll have to open up the necessary ports to pass HTTP requests to the virtual machine. To do this, go back to the EC2 console and select the &amp;quot;Security Groups&amp;quot; option in the sidebar, select your instance, then click the &amp;quot;Inbound&amp;quot; tab at the bottom of the page.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/generated/aws_flask/security_group-940x725-b8f19f.png&quot; class=&quot;blogtextimg&quot; width=&quot;100%&quot; &gt;&lt;/p&gt;

&lt;p&gt;Click the &amp;quot;Edit&amp;quot; button in the Inbound tab, then add a new rule. Select HTTP from the dropdown menu, and it will automatically open port 80 on your virtual machine.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/generated/aws_flask/http_rule-873x408-a11671.png&quot; class=&quot;blogtextimg&quot; width=&quot;100%&quot; &gt;&lt;/p&gt;

&lt;p&gt;Once the port has been opened, navigate your browser to your instance&amp;#39;s IP address, and you should be greeted by an Nginx welcome message. This message means that the webserver is working, and is ready to be hooked into your Flask app.&lt;/p&gt;

&lt;h2&gt;Configuring uWSGI&lt;/h2&gt;

&lt;p&gt;To hook flask into Nginx, we will be using the python package uWSGI. uWSGI is an alternate web process from the default one used by Flask that makes it easier to connect to Nginx. Unfortunately, the &lt;code&gt;pip&lt;/code&gt; installation of this module always seems to fail, so we use &lt;code&gt;apt-get&lt;/code&gt; instead:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;div class=&quot;shell&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install uwsgi-core uwsgi-plugin-python&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Next, we need to make a configuration file so that uWSGI knows the parameters of the Flask app it is serving. To do this, we create a parameter file, which usually has the &lt;code&gt;.ini&lt;/code&gt; suffix. For our example, we can create a &lt;code&gt;uwsgi.ini&lt;/code&gt; file in the &lt;code&gt;dummyapp/&lt;/code&gt; folder, containing the following:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;div class=&quot;shell&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;uwsgi&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;home&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; /home/ubuntu/dummyapp
wsgi-file &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; %&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;home&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;/run.py
&lt;span class=&quot;nv&quot;&gt;socket&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;127&lt;/span&gt;.0.0.1:3033
&lt;span class=&quot;nv&quot;&gt;callable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; app
&lt;span class=&quot;nv&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; app
&lt;span class=&quot;nv&quot;&gt;plugin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; python
&lt;span class=&quot;nv&quot;&gt;pythonpath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; %&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;home&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;daemonize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; %&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;home&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;/dummyapp.log
&lt;span class=&quot;nv&quot;&gt;pidfile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; %&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;home&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;/dummyapp.pid&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Before moving on, I will explain some of the options above:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;home&lt;/code&gt; defines the home directory of the app. This becomes a variable in some of the other options.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;wsgi-file&lt;/code&gt; defines the file that should be run to start the web process. This is, for almost everyone, &lt;code&gt;run.py&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;socket&lt;/code&gt; defines a port on the virtual machine that will pass information between uWSGI and nginx. The port number can be almost anything, as long as it is not used by another program. I recommend using ports 3301-3306, which should be unused by anything else.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;module&lt;/code&gt; defines the name of the folder containing views and templates, in most cases &lt;code&gt;app/&lt;/code&gt;. If you name your folder something else, change this entry to that name.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;daemonize&lt;/code&gt; defines the path to the log file for the Flask app. All lines printed to the console during a normal run of your app will be printed to this file instead. This will allow you to see any error messages or diagnostic print statements in your code.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pidfile&lt;/code&gt; defines the path to a file containing the process ID of the uWSGI process. This file will be used to stop the server when something needs to be changed.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once the uWSGI configuration file is finished, we will have to configure nginx to accept traffic from uWSGI. The configuration file for nginx is located at &lt;code&gt;/etc/nginx/nginx.conf&lt;/code&gt;. First, we need to break nginx&amp;#39;s hold on port 80 (the welcome message you see), and allow uWSGI and Flask to use it. To do this, comment out lines 71 and 72, which should be the first two uncommented lines after a giant commented block.&lt;/p&gt;

&lt;p&gt;Next, we need to tell nginx where to look when it gets traffic from outside sources. Below the lines you just commented out, and still within the &lt;code&gt;html&lt;/code&gt; block, add the following:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;div class=&quot;shell&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;server &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    listen &lt;span class=&quot;m&quot;&gt;80&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    location / &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        include uwsgi_params&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        uwsgi_pass &lt;span class=&quot;m&quot;&gt;127&lt;/span&gt;.0.0.1:3033&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This tells nginx to &amp;quot;listen&amp;quot; on port 80 (the default HTTP port), and pass all that information to uWSGI on port 3033 (make sure to change this port to whatever you specified in the config file).&lt;/p&gt;

&lt;p&gt;Now that we have updated nginx to use the correct parameters, we need to restart it so it re-reads the config file. Do this with:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;div class=&quot;shell&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo service nginx restart&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You should see an &lt;code&gt;[OK]&lt;/code&gt; message, which means that nginx was restarted successfully. Now we need to start the uWSGI process to finish everything off. To do this, simply run:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;div class=&quot;shell&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;uwsgi ~/dummyapp/uwsgi.ini&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now if you point your browser to the IP address of your instance, you should see the hello message from your dummy Flask app. If you do, &lt;strong&gt;congrats, you&amp;#39;re (almost) done!&lt;/strong&gt;. If not, check the log file (&lt;code&gt;~/dummyapp/dummyapp.log&lt;/code&gt;) to see what problems have arisen. Google those error messages to troubleshoot. To stop the uWSGI process, run:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;div class=&quot;shell&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;uwsgi --stop ~/dummyapp/dummyapp.pid&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now that you had a dummy app working, you can begin to copy over your completed app. Make sure to test it before starting into deployment. Run the app interactively first, by calling the &lt;code&gt;run.py&lt;/code&gt; file and checking to see if there are any errors. Most likely, you will have to install many supporting python packages, or recreate your database before the app will run, without complicating the process with uWSGI and nginx.&lt;/p&gt;

&lt;p&gt;After the app is working locally, make sure to create a tunnel on port 5000 and play around with using it. Make sure the app behaves in a reasonable manner, as you will be able to see the error messages easily. Once you&amp;#39;ve confirmed that most functionality is working, recreate the uWSGI configuration file, and start the uWSGI process.&lt;/p&gt;

&lt;h2&gt;Notes&lt;/h2&gt;

&lt;p&gt;One import note on uWSGI is that it does not reload upon changes to your Flask app. If you copy down a new version from github, or make edits to the code locally, you will have to stop and start the uWSGI process for the changes to become live. While this seems strange at first, it is helpful if you accidentally mess something up; your live app won&amp;#39;t see the issue, and you&amp;#39;ll have time to fix things, or roll back, if necessary.&lt;/p&gt;

&lt;p&gt;Nginx allows you to do many advanced and nice things, such as subdomains. If your main site is running at &lt;code&gt;example.com&lt;/code&gt;, you would be able to create another flask app, pass it through a different port to nginx, and serve that app on &lt;code&gt;another.example.com&lt;/code&gt;. This allows you to use your single AWS instance for a whole host of side projects, which is not possible with other Flask web servers.&lt;/p&gt;

&lt;p&gt;Hopefully this walkthrough was easy to follow and understand, and you now have at least a dummy app, but your full project working on AWS. In the near future, I&amp;#39;ll be adding a few more Flask and AWS tricks to this blog, so stay tuned.&lt;/p&gt;
</description>
        <pubDate>Sat, 21 Mar 2015 00:00:00 -0700</pubDate>
        <link>http://localhost:4000/blog/Flask-AWS-Setup/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/Flask-AWS-Setup/</guid>
        
        <category>Data Science</category>
        
        <category>Insight</category>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>#AAS225 and What's Next</title>
        <description>&lt;p&gt;For those of you who know me personally (or follow me on Twitter), you know that I am currently in Seattle for the American Astronomical Society (AAS) meeting. Tomorrow I&amp;#39;ll be doing a dissertation talk, distilling the entirety of my work at TCU over the past 4 years into a overly-short 15 minute presentation. After the conference, however, I will not be getting on a plane back to DFW, but will instead be headed just a bit down the west coast to San Francisco. I &lt;a href=&quot;/blog/transition-to-data-science/&quot;&gt;previously wrote&lt;/a&gt; about how academia was heading for a breakdown and many scientists were turning to industry for employment. Now I&amp;#39;m one of those scientists.&lt;/p&gt;

&lt;p&gt;Instead of heading back home, I will be living in Palo Alto, CA for 3 months while I attend the &lt;a href=&quot;http://insightdatascience.com&quot;&gt;Insight Data Science Program&lt;/a&gt;. Insight is a 3-month training program that looks for hard-science Ph.D. that wish to transition into the data science industry in Silicon Valley. From what I&amp;#39;ve heard from people at the AAS, it is a very exclusive club, and is extolled by those who know somebody who previously attended. &lt;/p&gt;

&lt;p&gt;The first six weeks of the program involves all of the necessary programming training for a job in the industry. I will pick a public data set and complete an analysis similar to one I would do in a data science job. For the second six weeks, I will interview at top tech companies who sponsor the program: companies like Facebook, LinkedIn, Microsoft, and Jawbone (you can see a full list of the awesome places I could end up on the &lt;a href=&quot;http://insightdatascience.com&quot;&gt;Insight home page&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Attending the conference this week has only solidified my choice to transition into data science. Reading posters on topics completely unrelated to my area of expertise got me excited simply due to the interesting results they achieved. It cemented the fact that I enjoy tackling new challenges and learning new things, regardless of the subject matter I&amp;#39;m working with. I am just as happy to study binary systems (my current area), as I am starspots, or galaxy simulations, or website user data. As long as I&amp;#39;m able to satisfy my curiosity to explore the world around me through data, I will be happy.&lt;/p&gt;

&lt;p&gt;While 2014 was an amazing year for me (I got married!), I believe 2015 will be the best yet. I&amp;#39;m extremely excited for the opportunity to be a part of this highly-regarded program, and thankful to have found a solid path forward after grad school. I will be back in DFW on April 1st, when I&amp;#39;ll defend my Ph.D., and then Chrissy and I will leave sometime in mid- to late May to head out for San Francisco full time.&lt;/p&gt;

&lt;p&gt;Although I haven&amp;#39;t been using it much lately, this blog will be more active while I&amp;#39;m in the program. I&amp;#39;ll be sharing my experiences, as well as the new things I&amp;#39;ve learned, hoping that it might help the next lost astrophysicist (or biologist, or economist, etc.). Look for more good stuff in the coming weeks.&lt;/p&gt;
</description>
        <pubDate>Wed, 07 Jan 2015 00:00:00 -0800</pubDate>
        <link>http://localhost:4000/blog/AAS225/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/AAS225/</guid>
        
        <category>Research</category>
        
        <category>Data Science</category>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>From Astronomy to Data Science: One Size Fits All?</title>
        <description>&lt;p&gt;Academia has been undergoing a crisis as of late. Many disciplines (even &amp;quot;hot ones,&amp;quot; such as &lt;a href=&quot;http://arstechnica.com/science/2014/04/is-us-biomedical-research-heading-for-a-breakdown/&quot;&gt;biomedical research&lt;/a&gt;) have been finding that they are producing too many short-term jobs (post-docs), and too few permanent positions to sustain the outflow of Ph.D.s.&lt;/p&gt;

&lt;p&gt;Astronomy (my chosen field), is no exception. Heaped on top of this is the fact that as the U.S. government tightens it&amp;#39;s belt, &amp;quot;pure science&amp;quot; budgets, such as those for NASA and NSF&amp;#39;s astronomy grants, are those removed first. As grant money earned is often a metric to determine tenure, this makes it even harder to keep a tenure-track job, if you somehow manage to get one in the first place.&lt;/p&gt;

&lt;p&gt;As I&amp;#39;ve come to terms with this, I&amp;#39;ve begun to look into alternative fields for a career, and data science is one I have seen a lot. But looking into the several &amp;quot;&lt;a href=&quot;http://womeninastronomy.blogspot.com/2013/01/datascience.html&quot;&gt;astronomer to data scientist&lt;/a&gt;&amp;quot; transition &lt;a href=&quot;http://womeninastronomy.blogspot.com/2013/01/astroVdatascience.html&quot;&gt;guides&lt;/a&gt; on the &lt;a href=&quot;http://betterbayes.wordpress.com/2014/07/24/preperation-for-a-transition-to-data-science/&quot;&gt;web&lt;/a&gt;, all seem to tell me the same thing: &amp;quot;learn lots of programming languages, like Python, R or SAS.&amp;quot; &amp;quot;Learn &lt;a href=&quot;http://en.m.wikipedia.org/wiki/NoSQL&quot;&gt;NoSQL&lt;/a&gt;, &lt;a href=&quot;http://hadoop.apache.org&quot;&gt;Hadoop&lt;/a&gt;, and &lt;a href=&quot;http://en.m.wikipedia.org/wiki/Mapreduce&quot;&gt;MapReduce&lt;/a&gt;.&amp;quot; In short, these guides seem to think every data science job is the same: a &amp;quot;big data&amp;quot; scientist at a Silicon Valley startup or tech titan.&lt;/p&gt;

&lt;p&gt;If somebody was preparing for a career in physics and asked you what they should learn to prepare, you wouldn&amp;#39;t necessarily be able to answer. Interested in computational astrophysics? You&amp;#39;ll need to know C or FORTRAN to write highly parallelized codes that run on supercomputers. Interested in engineering? You probably don&amp;#39;t need to spend your time learning general relativity. &amp;quot;Physics&amp;quot; isn&amp;#39;t one thing, and therefore you can&amp;#39;t just prepare in a single way. Data science is exactly the same.&lt;/p&gt;

&lt;p&gt;Instead of prescribing preparation steps for a very specific job, below are some general tips I&amp;#39;ve found in my time exploring the data science market, that everyone should definitely do.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Do some reading on general data science principles.&lt;/strong&gt; Regardless of what subsection of data science you want to go into, everyone should be well-versed in the &amp;quot;fundamental principles.&amp;quot; &lt;a href=&quot;http://www.amazon.com/Data-Science-Business-data-analytic-thinking/dp/1449361323/&quot;&gt;Data Science for Business&lt;/a&gt; is an excellent book on this topic, and I suggest everyone read through it. Not only will it give you an outline of many of the basic data science algorithms, but really hammers in the fact that data science &lt;em&gt;is part of business, not a hard science&lt;/em&gt;. Everything you do should be to further the business goals.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Decide whether data science is really what you want.&lt;/strong&gt; In the last bullet of her &lt;a href=&quot;http://womeninastronomy.blogspot.com/2013/01/astroVdatascience.html&quot;&gt;&amp;quot;Astronomy vs Data Science&amp;quot; post&lt;/a&gt;, Jessica Kirkpatrick states that you cannot dictate the subject matter in industry like you can in academia. As stated above, everything you do in data science should be to further the business goals. This can be an adjustment, as in academia you pick a subject largely unconstrained by others. Make sure this is a trade-off you&amp;#39;re okay with.&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;For me, I enjoy taking (often incomplete) data and telling a story with it. It doesn&amp;#39;t matter what I&amp;#39;m looking at: star brightnesses to determine masses or customer location history to detect fraud, I enjoy any time I am &amp;quot;learning&amp;quot; something. For others, this may not be the case. No matter the benefits of a data science career (salary, locations, job security), doing something you don&amp;#39;t enjoy isn&amp;#39;t the way to go.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Decide what section of data science you want to enhabit.&lt;/strong&gt; Does working for Google or Facebook tracking millions (or billions) of users&amp;#39; behaviors online sound exciting? How about &lt;a href=&quot;http://ars.to/1zc3H6r&quot;&gt;data mining thousands of healthy people&amp;#39;s DNA to improve healthcare&lt;/a&gt;? Maybe you &lt;em&gt;should&lt;/em&gt; look into the &amp;quot;Silicon Valley Big Data&amp;quot; jobs. Maybe you&amp;#39;d like to track how people respond to coupon offers, in order to more fine-tune a company&amp;#39;s marketing strategy? There are many of these &amp;quot;data analyst&amp;quot; positions available as well, and they are usually in high demand all across the country. There are also all kinds of jobs inbetween.&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Do some research on job sites, such as &lt;a href=&quot;http://jobsearch.monster.com/search/data-science_5&quot;&gt;monster&lt;/a&gt; or &lt;a href=&quot;http://www.indeed.com/jobs?q=data+science&amp;l=&quot;&gt;indeed&lt;/a&gt;, to see what data science jobs are out there. Read the job descriptions and requirements to see what types of positions you&amp;#39;re interested in and/or qualified for.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;After doing some background research on what jobs you might want, there are many diverging paths to take. Everyone&amp;#39;s individual preparation method will be different in several areas:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;What programs you&amp;#39;ll need to learn.&lt;/strong&gt; Big Data jobs: definitely brush up on Hadoop, MapReduce, Pig, Hive, etc. Learn a legitimate programming language, like Python. Depending on the company, they may also want an even newer language, like &lt;a href=&quot;http://julialang.org&quot;&gt;Julia&lt;/a&gt;. Going for an analyst position? Make sure you know your SQL backwards and forwards, as many business databases are MySQL. Depending on the company, you may not even need to learn a programming language: all calculations are expected to be in Excel! This doesn&amp;#39;t mean it&amp;#39;s easier, however; learning how to make Excel do advanced things requires just as much time as Python. Maybe even longer!&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Also be aware of how &amp;quot;stats-forward&amp;quot; your potential jobs may be. If you&amp;#39;re going into Big Data, or a data-science-heavy company, you may need to brush up on your statistics in order to understand and implement Bayesian methods. If you&amp;#39;re going into an analyst position, you might not need to know as much, because Bayesian models may hurt your cause, rather than help (see below).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;What methods and algorithms you&amp;#39;ll need to employ.&lt;/strong&gt; Lots of data science is crunching numbers, but that&amp;#39;s not the only thing available. Some data science mines text, for example to detect plagiarism in student papers. If you find many job listingss where this might be a component, you should learn more about Natural Language Processing. Similarly, some data science focuses on images; perhaps automatically comparing signatures on checks or handwriting in documents to detect fraud. Look into image processing algorithms, which may be useful here.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;How you&amp;#39;ll need to communicate.&lt;/strong&gt; &lt;em&gt;All data science should further the business goals&lt;/em&gt; (pound that notion in). Regardless of where you&amp;#39;re working, or what you&amp;#39;re doing, you will &lt;em&gt;always&lt;/em&gt; have to be justifying your thoughts, approach, and implementation to others, higher up. If you cannot sell them on what you&amp;#39;re doing, do not expect to be able to move forward (see how this is different than hard science?). How you have to defend yourself, and what tools you&amp;#39;ll be &amp;quot;allowed&amp;quot; to use, however, will vary greatly from job to job.&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;At a company with a large focus on data science, you may be working with an entire team of data scientists. You may have managers (who themselves are data scientists), who will act as the intermediary between you and the business leaders. You need to sell the managers, who will then take it upon themselves to sell the executives. This is a somewhat easier setup: the people you are directly interfacing with understand data science. You can talk about Bayesian statistics, ensemble methods and specific python modules to bolster your case, and they will be able to speak the same language.&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Going to an analyst position, or a company with a small data science team? You may be speaking directly to executives to sell them on your plan. While more advanced classification schemes, such as Bayes, may provide better results, they may hamper your efforts here, because nobody you&amp;#39;re talking to will understand them! You may be forced to fall back to simple Decision Tree Classifiers, which you can plot, and everyone can understand. Be prepared to &amp;quot;dumb down&amp;quot; your models, or be able to explain them creatively, so that everyone can get on board.&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;This is another area where data science (and business in general) is different than science. In science, you are judged by the quality of your work, and only slightly by how you present it. If you have an amazing find, but you stammer a bit in your talk, or your paper is a little disorganized, you still may be lauded in the scientific community. In business, it&amp;#39;s the opposite: it doesn&amp;#39;t matter whether you found an amazing classification model if you can&amp;#39;t explain it. If you stumble through a meeting with executives, your entire project may be killed, even if it would have saved the company millions of dollars. &lt;em&gt;Practice your public speaking!&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So now that you&amp;#39;ve hammered out your list of things you need to learn, how will you do that? The best option is to look to free online courses, from places like Coursera, or Udacity. Another good option is just search the web for resources on the specific area you want to learn. Hadoop has an &lt;a href=&quot;http://lintool.github.io/Cloud9/&quot;&gt;excellent walkthrough&lt;/a&gt; online, and many of these other advanced tools do as well.&lt;/p&gt;

&lt;p&gt;Not only will you be learning relevant skills for your future job, but you&amp;#39;ll also be proving to a future employer that you &lt;em&gt;can&lt;/em&gt;. I&amp;#39;ve heard from many people in the industry that most of what companies care about are inherent traits, not skills. Sure, being able to check off the list of requirements is good, but they more want to see whether you are a deep quantitative thinker, whether you&amp;#39;re able to carry out independent projects in a timely manner, and whether you&amp;#39;re able to efficiently learn new skills that may be necessary for the job. Show them that you can.&lt;/p&gt;

&lt;p&gt;Lastly, put those skills to use and practice! &lt;a href=&quot;http://www.kaggle.com&quot;&gt;Kaggle.com&lt;/a&gt; has many excellent challenges that give you chances to work on real datasets, and test your algorthims&amp;#39; accuracy. They range in difficulty and approach, providing challenges for any realm of data science you wish to enter. Go check them out!&lt;/p&gt;
</description>
        <pubDate>Tue, 29 Jul 2014 00:00:00 -0700</pubDate>
        <link>http://localhost:4000/blog/transition-to-data-science/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/transition-to-data-science/</guid>
        
        <category>Data Science</category>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Solving Astronomy Software-Rot</title>
        <description>&lt;p&gt;There is a problem in astronomy (probably in other sciences too, but I see it mainly in my field), which I will term &amp;quot;software-rot,&amp;quot; after the better known term &lt;a href=&quot;http://en.wikipedia.org/wiki/Link_rot&quot;&gt;link-rot&lt;/a&gt;. There are several key packages of software that many astronomers rely on to do &lt;strong&gt;basic&lt;/strong&gt; data reduction that are either no longer being developed, or the developer is working on such an old configuration it may as well not be.&lt;/p&gt;

&lt;p&gt;The main offender is most likely &lt;a href=&quot;http://iraf.net&quot;&gt;IRAF&lt;/a&gt;, which every astronomer will tell you they hate, but still install and use it anyway. IRAF is old and clunky, with installation documentation which looks like it is from another decade. The problem was supposed to be fixed with &lt;a href=&quot;http://www.stsci.edu/institute/software_hardware/pyraf&quot;&gt;PyRAF&lt;/a&gt;, but it seems like more of a rewrite of bad code in a new language (python) than an actual solution.&lt;/p&gt;

&lt;p&gt;While I do not work on spectroscopy, a vast majority of the TCU lab focuses on it. One of the main reduction programs in astronomical spectroscopy is &lt;a href=&quot;http://www.as.utexas.edu/%7Echris/moog.html&quot;&gt;Chris Sneden&amp;#39;s MOOG&lt;/a&gt;. This program, one of the most used single software packages in astronomy, is written in FORTRAN-77 which, at 27 years old, is barely supported by the most recent gfortran compiler. A program that is so widely used by astronomy graduate students &lt;strong&gt;shouldn&amp;#39;t be older than the students themselves&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;With IT pushing old machines off the network, the TCU lab is in the process of upgrading every computer from Snow Leopard to Mavericks to future-proof the lab for several years. With this upgrade comes the task of re-compiling all the source code we use on a daily basis. MOOG is one of these programs. Even without the migration, MOOG has been almost impossible to install, and even more trouble comes with the removal of all 32-bit libraries in OS X versions 10.7+.&lt;/p&gt;

&lt;p&gt;Luckily, I found an awesome &lt;a href=&quot;https://github.com/andycasey/moog&quot;&gt;1-click installer for MOOG&lt;/a&gt;, packaged as a Python program. Unfortunately, this program does not compile on Mavericks. So before we upgraded any of our machines, we needed to figure out a way to get MOOG running on 10.9. Fortunately, I discovered how. While the installer for MOOG does not work on Mavericks, it does work on Snow Leopard. And I&amp;#39;ve found that the pre-built binary from a Snow Leopard installation will work and run on a Mavericks computer.&lt;/p&gt;

&lt;p&gt;To get this working on your machines, follow the steps below.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;First, you&amp;#39;ll need access to a OS X 10.6 Snow Leopard machine. This can be in the form of an actual Snow Leopard computer (which we still have around the lab), or a Virtual Machine running Snow Leopard. More recent version of OS X (10.7+) allow for virtualization of Snow Leopard Server (not the client version). If you have an install disk for 10.6 Server, hold onto it, as you can make a Virtual Machine in &lt;a href=&quot;https://www.virtualbox.org&quot;&gt;Virtualbox&lt;/a&gt; or some other virtualization software.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;On your Snow Leopard machine, install XCode. This can be done by either running the XCode installer from the install DVD, or downloading an XCode installer from &lt;a href=&quot;http://developer.apple.com/downloads&quot;&gt;developer.apple.com/downloads&lt;/a&gt;, logging in with your AppleID, and searching for Snow Leopard XCode downloads.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Next you&amp;#39;ll need to download g77, a GNU FORTRAN-77 compiler, which you can find at &lt;a href=&quot;http://hpc.sourceforge.net&quot;&gt;hpc.sourceforge.net&lt;/a&gt;. Make sure to download the intel version, which will extract to &lt;code&gt;g77-intel-bin.tar&lt;/code&gt;. Install the binaries by running &lt;code&gt;sudo tar -xvf g77-intel-bin.tar -C /&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Next, you&amp;#39;ll need to download and install &lt;a href=&quot;http://scisoftosx.dyndns.org&quot;&gt;scisoft&lt;/a&gt;. While scisoft itself is definitely a &amp;quot;software-rot&amp;quot; offender, it&amp;#39;s also the only way to get a (free) version of SuperMongo installed, which is required for MOOG. It&amp;#39;s a monster of a package, and will install a ton of things, but if you&amp;#39;re astronomer you&amp;#39;ll probably want them installed anyway (IRAF and scientific Python installations are also included).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Lastly, you&amp;#39;ll need to download the MOOG 1-click installer from &lt;a href=&quot;https://github.com/andycasey/moog&quot;&gt;github&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now you just need to install MOOG. Within the newly-downloaded moog-master, run &lt;code&gt;sudo python setup.py install&lt;/code&gt;. The build &lt;em&gt;should&lt;/em&gt; run with no errors. The newly-built &lt;code&gt;MOOG&lt;/code&gt; and &lt;code&gt;MOOGSILENT&lt;/code&gt; binares will be located in &lt;code&gt;/usr/local/bin/&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The &lt;code&gt;MOOG&lt;/code&gt; and &lt;code&gt;MOOGSILENT&lt;/code&gt; binaries will work on a Mavericks installation. I believe there is a problem with the install on Mavericks because g77 and the other associated libraries contain only 32bit binaries, which Mavericks does not allow. However, Mavericks has no trouble &lt;em&gt;running&lt;/em&gt; 32bit binaries once they are compiled, and therefore the Snow Leopard-built executables will function properly.&lt;/p&gt;

&lt;p&gt;Before you can run this executable on your Mavericks computer, you&amp;#39;ll have to install a few things. On the new computer you wish to install MOOG on, you&amp;#39;ll have to run a few more steps.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Again, download and install &lt;a href=&quot;http://scisoftosx.dyndns.org&quot;&gt;scisoft&lt;/a&gt; (using a Mavericks version this time). MOOG depends on SuperMongo, and therefore these libraries must exist.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Make sure X11 is installed. Because Apple no longer maintains their X11 application, you&amp;#39;ll have to download and install &lt;a href=&quot;http://xquartz.macosforge.org/landing/&quot;&gt;XQuartz&lt;/a&gt; instead.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When MOOG starts, it writes some data files to a specific directory. In the current install, this directory is located at &lt;code&gt;/.moog&lt;/code&gt;. You will have to create this directory manually and make sure that all users can read and write to it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Lastly, you&amp;#39;ll have to download a &lt;em&gt;modified&lt;/em&gt; version of the 1-click installer from &lt;a href=&quot;https://github.com/bathompso/moog&quot;&gt;my github&lt;/a&gt;, which contains an additional library, &lt;code&gt;libg2c.0.dylib&lt;/code&gt;. Copy this library to &lt;code&gt;/usr/local/lib&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;After all the prerequisites are satisfied, copy over the compiled binaries to somewhere within your path. I chose &lt;code&gt;/usr/local/bin&lt;/code&gt;, as that&amp;#39;s where they were installed on the original Snow Leopard machine.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now you should be able to run a fully-working MOOG program on your less-than-5-years-old OS. On the first run, it may take a &lt;em&gt;long time&lt;/em&gt; for MOOG to initiate X11 (since I run everything through Terminal), or sometimes fail to intitate it at all. It helps to open X11 before initiating the program, as then it will pop up immediately.&lt;/p&gt;

&lt;p&gt;I &lt;strong&gt;strongly suggest&lt;/strong&gt; backing up these executables once you confirm they&amp;#39;re working correctly. This method relies on programs which may no longer exist several years from now, and it&amp;#39;s better to have an archive of the compiled binaries than a walkthrough which sources links that no longer exist.&lt;/p&gt;
</description>
        <pubDate>Tue, 22 Apr 2014 00:00:00 -0700</pubDate>
        <link>http://localhost:4000/blog/moog/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/moog/</guid>
        
        <category>Research</category>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Big Bang breakthrough: astronomers report signs of the universe's creation</title>
        <description>&lt;p&gt;&lt;a href=&quot;http://www.theverge.com/2014/3/17/5518346/first-evidence-gravitational-waves-supports-big-bang-inflation&quot;&gt;Astronomers, using a small telescope in the South Pole have made an amazing discovery&lt;/a&gt;. If this finding turns out to be real (via confirmation from another observatory), it may well be the most important astronomical breakthrough of this century. The detected signal not only would be, I believe, the first measurement of &lt;a href=&quot;http://en.wikipedia.org/wiki/Gravitational_wave&quot;&gt;gravitational waves&lt;/a&gt;, but also a confirmation of [cosmic Inflation](http://en.wikipedia.org/wiki/Inflation_(cosmology)).&lt;/p&gt;

&lt;p&gt;Inflation was mainly &amp;quot;invented&amp;quot; to solve several cosmological problems: the flatness of the Universe and the uniformity of the &lt;a href=&quot;http://en.wikipedia.org/wiki/Cosmic_microwave_background&quot;&gt;CMB&lt;/a&gt;. It completely explained those, but it still was essentially a &amp;quot;made up&amp;quot; fix. If this confirmation is true, it would finally cement Inflation as a certified Theory, instead of a &amp;quot;thought experiment&amp;quot; solution to our cosmological observations.&lt;/p&gt;

&lt;p&gt;Now that Inflation has been (supposedly) confirmed true, I hope we can do the same with the two existing cosmological &amp;quot;fudge factors&amp;quot;: dark matter and dark energy. Now &lt;strong&gt;that&lt;/strong&gt; would actually be the most important cosmological breakthrough of this century.&lt;/p&gt;
</description>
        <pubDate>Fri, 21 Mar 2014 00:00:00 -0700</pubDate>
        <link>http://localhost:4000/blog/Inflation/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/Inflation/</guid>
        
        <category>Science</category>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Google Moving Forward With Project Ara</title>
        <description>&lt;p&gt;I was &lt;a href=&quot;http://bathompso.com/blog/project-ara/&quot;&gt;initially skeptical&lt;/a&gt; (and still am) of Project Ara&amp;#39;s viability, it looks like Google is &lt;a href=&quot;http://www.theverge.com/2014/2/27/5452770/project-ara-smartphone-release-date-price-google-estimate&quot;&gt;moving forward with the project&lt;/a&gt;, with some suggesting that devices might go on sale in the next year. This could be a huge shift in how mobile is done, and is at least an innovative product coming out of somebody in the smartphone space.&lt;/p&gt;

&lt;p&gt;The biggest impact for me, and one of the coolest aspects of Project Ara, is that most (if not all) of the components will be 3D printed. You will customize your phone using an app, or a console on the Project Ara printer, then all modules will be printed and spit out for you to connect together into your phone. Similarly, individual modules can be chosen and printed for select upgrades. This is awesome for me as 3D Systems (of which I own some stock), is a partner of Google in this endeavour. If Google plans on shipping out 3D Systems&amp;#39; printers across the globe for use in Project Ara, this could have a huge upside for them.&lt;/p&gt;

&lt;p&gt;Regardless of the financial gains for 3D Systems, I am interested to see if and how this project moves forward. And if they &lt;strong&gt;are&lt;/strong&gt; selling basic level phones for $50, I might go and pick one up. Perfect travel phone?&lt;/p&gt;
</description>
        <pubDate>Thu, 27 Feb 2014 00:00:00 -0800</pubDate>
        <link>http://localhost:4000/blog/project-ara-2/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/project-ara-2/</guid>
        
        <category>Technology</category>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Why I Shifted from Wordpress.org to Jekyll</title>
        <description>&lt;p&gt;A personal website is useful in the current age, both as a marketing mechanism for me, and an outlet for things I want to share with everyone. Perhaps not many people read my blog posts, but my &lt;a href=&quot;http://github.com/bathompso&quot;&gt;research code&lt;/a&gt; and my &lt;a href=&quot;http://bathompso.com/education/&quot;&gt;class outlines&lt;/a&gt; will hopefully be used by others.&lt;/p&gt;

&lt;h3&gt;First Attempt&lt;/h3&gt;

&lt;p&gt;My first attempt at a website involved me coding the entire thing (HTML, CSS, JavaScript) from scratch. This not only made it so that I could make the site I wanted, but also as a learning experience for me. I&amp;#39;m proud to say my web skills are better than a novice due to me struggling through building an entire site from the ground up.&lt;/p&gt;

&lt;p&gt;There were several problems with this approach:
* It takes &lt;em&gt;forever&lt;/em&gt; to code pages from scratch. Partly because I didn&amp;#39;t know a ton of HTML at the time, but also because I&amp;#39;m not a designer. I could never get things quite right, and it was hard settling on a design.
* When I wanted to change the design or some other element, it also took a ton of time to manually change every page. But, by coding everything by hand, there wasn&amp;#39;t a way to template anything.&lt;/p&gt;

&lt;p&gt;To avoid this massive time sink, I actually coded a manual template engine by making a Perl script which formatted plain text blog posts into web pages. The Perl script would convert each text file on-the-fly. It seems a bit ridiculous, but it was the only way I could figure out how to do it all on my own.&lt;/p&gt;

&lt;h3&gt;WordPress&lt;/h3&gt;

&lt;p&gt;After a whole of having a hand-coded site that I never really loved, I went completely the other direction: Wordpress.org&lt;/p&gt;

&lt;p&gt;I self-hosted the wordpress-generated site on one of the many computers in my control, forwarding my domain to my home IP.&lt;/p&gt;

&lt;p&gt;Wordpress is awesome in the fact that it does &lt;strong&gt;everything&lt;/strong&gt; for you. There are thousands of themes, which make things look 1000x times better than what I could implement, and has hundreds of plugins that handle any other task you could think of. Collapsible text sections? Easy. Really fancy, touch-enabled jquery slider? Done. For a long time I appreciated this ease of use, but not everything was perfect.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The internet connection to my house is less than stellar through &lt;a href=&quot;http://clear.com&quot;&gt;Clear&lt;/a&gt;, and I have no intention of paying money to put it on a external host. This meant that many of my hi-res images would take quite a while to load, regardless of the user&amp;#39;s Internet speed.&lt;/li&gt;
&lt;li&gt;All day I work on editing text files in full-screen BBEdit, which nicely aligns all my text, syntax highlights, and is easy to use. The wordpress web-interface has a full-screen mode, but it still leaves much to be desired. There are available apps to do editing, but all look like they haven&amp;#39;t been updated since Mac OS X Leopard.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Jekyll&lt;/h3&gt;

&lt;p&gt;My friend Brian recently put &lt;a href=&quot;http://jekyllrb.com&quot;&gt;Jekyll&lt;/a&gt; on my radar by wanting to use it for a big project at work, and I began to play around with it. Jekyll is a blog-centric web creation tool. It allows you to make template HTML files, which have content fed to them from various &lt;a href=&quot;http://daringfireball.net/projects/markdown/&quot;&gt;markdown&lt;/a&gt; files. It then converts all the templates, markdown, and other files into a site of static HTML images. No database queries like wordpress or others, which makes it naturally faster to load and less strenuous on any hosting system.&lt;/p&gt;

&lt;p&gt;Because everything is a text file (HTML or markdown), I can edit it in anything I want. BBEdit on my Mac, and the awesome &lt;a href=&quot;http://bywordapp.com&quot;&gt;ByWord app&lt;/a&gt; on my iPhone and iPad (I&amp;#39;m using the iPhone app right now). Way better than the subpar Wordpress web editor and questionable iOS apps. &lt;/p&gt;

&lt;p&gt;Another great plus of Jekyll is that it is in the good graces of the GitHub gods. GitHub launched a cool new initiative called GitHub pages, where GitHub will give you free hosting if you sign up (username.github.io). Of course, this would never work with Wordpress as it requires a database, but Jekyll sites, since they&amp;#39;re all static, will work perfectly fine. Additionally, github will host all your pre-compiled Jekyll files, so you don&amp;#39;t even have to run that compilation yourself.&lt;/p&gt;

&lt;p&gt;With my site now being hosted via GitHub instead of through my slow connection, large images will load almost instantly instead of several seconds.&lt;/p&gt;

&lt;p&gt;There are lots of other considerations as well:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Security: no longer do I have to worry about security updates and vulnerabilities in my wordpress-hosting computer. Everything public-facing is on a separate server, not a tunnel into all my devices.&lt;/li&gt;
&lt;li&gt;Style Sheets: instead of giant, clunky CSS files, I can write all of my styles in &lt;a href=&quot;http://sass-lang.com&quot;&gt;SASS&lt;/a&gt; and have it compiled into a mini-fied CSS file through &lt;a href=&quot;http://incident57.com/codekit/&quot;&gt;Code Kit&lt;/a&gt;. Variables and nested styles!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While it took a while to transfer my &lt;a href=&quot;http://wordpress.org/themes/origin&quot;&gt;Wordpress Theme&lt;/a&gt; to Jekyll, now that it&amp;#39;s there it&amp;#39;s mostly smooth sailing. Still missing a few pages, but those will easily be converted over in the coming week or so. And future additions to my Education and Research sections will be a lot easier thanks to the markdown content.&lt;/p&gt;
</description>
        <pubDate>Fri, 07 Feb 2014 00:00:00 -0800</pubDate>
        <link>http://localhost:4000/blog/migrating-to-jekyll/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/migrating-to-jekyll/</guid>
        
        <category>Technology</category>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>The Problem with New Methods</title>
        <description>&lt;p&gt;My research involves detecting binary star systems in star clusters. Binary star systems are systems where two stars are orbiting each other. The most famous binary system is Tatooine from Star Wars, with its &lt;a href=&quot;http://thethoughtstash.files.wordpress.com/2011/01/sw_binary_sunset.jpg?w=500&amp;#038;h=281&quot;&gt;famous double sunset&lt;/a&gt;. The &amp;quot;closest star to the Sun,&amp;quot; Alpha Centauri, is actually a binary system as well (and even has a third star orbiting it further out!)&lt;/p&gt;

&lt;p&gt;The number of binary systems in a cluster are very important for numerical simulations, as are the masses of the stars in the system. The results from this research have implications for simulations of galactic evolution, and will be fully explained on a devoted page here sometime soon.&lt;/p&gt;

&lt;p&gt;My method of detecting binary systems involves imaging the star cluster using several different &lt;em&gt;filters&lt;/em&gt;. Filters only allow specific wavelengths of light through to the telescope (e.g. only Red light, only Green light, etc.). Using these images, we can determine not only which of the points of light we see that are binary systems instead of a single star, but also what the masses of each star is. The problem with new method is, however, that you can&amp;#8217;t trust the results coming out of it until you compare it to known results from other methods. As I am planning to present my research at the upcoming &lt;a href=&quot;http://aas.org/meetings/223rd-aas-meeting-washington-dc&quot;&gt;Winter 2014 American Astronomical Society meeting&lt;/a&gt; in DC, I needed to find an older dataset to compare my results to.&lt;/p&gt;

&lt;p&gt;One of the clusters in my data, NGC 188 (pictured above), has other data on it using radial velocities (RVs), the established method of detecting binary systems. Here, astronomers measure the speed at which a star in the cluster is moving towards or away from us at various points in time. Single stars won&amp;#8217;t change their speed, whereas binary systems will oscillate as they orbit each other. By taking enough measurements, one can determine the orbit of each star and determine stellar mass. &lt;strong&gt;[Note: It is more complicated than this is general. There will also be a page on this concept in the future]&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The RV data used was from &lt;a href=&quot;http://adsabs.harvard.edu/abs/2009AJ....137.3743G&quot;&gt;Geller et al. (2009)&lt;/a&gt;. For reference, it contains RV measurements from December 1973 to August 2008. This dataset, which I am hoping to duplicate by comparing results &lt;em&gt;took 35 years to create.&lt;/em&gt; This is, in fact, the problem with RV studies: to characterize orbits and determine masses, you have to observe over a very long time. The input into my code was measurements from 12 images. If you could get observing time on the right instruments, gathering the data would only take 5 nights.&lt;/p&gt;

&lt;p&gt;My method involves comparing observed stars to models, and I used three different ones to see how that affected the determined mass. I found that all three models did very well, as seen below. For clarification on the terminology, the &lt;em&gt;primary&lt;/em&gt; star is the larger star in the binary system, and the &lt;em&gt;secondary&lt;/em&gt; is the smaller.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/generated/bincompare-940x518-cb9c48.png&quot; class=&quot;blogtextimg&quot; &gt;&lt;/p&gt;

&lt;p&gt;When I started out, I was hoping for 5-10% accuracy for the primary and 10-20% accuracy for the secondary. For these stars, it looks like we are within that range.&lt;/p&gt;

&lt;p&gt;This comparison will enhance any results on future clusters, a few of which will also be presented at this year&amp;#39;s AAS.&lt;/p&gt;
</description>
        <pubDate>Tue, 17 Dec 2013 00:00:00 -0800</pubDate>
        <link>http://localhost:4000/blog/problem-with-new-methods/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/problem-with-new-methods/</guid>
        
        <category>Research</category>
        
        
        <category>blog</category>
        
      </item>
    
  </channel>
</rss>
