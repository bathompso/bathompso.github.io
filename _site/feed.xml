<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>bathompso.com</title>
    <description>&quot;The Corps Issued Me A Rifle, Not Wings&quot;
</description>
    <link>http://bathompso.com/</link>
    <atom:link href="http://bathompso.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 03 Jul 2016 09:47:29 -0700</pubDate>
    <lastBuildDate>Sun, 03 Jul 2016 09:47:29 -0700</lastBuildDate>
    <generator>Jekyll v3.1.6</generator>
    
      <item>
        <title>Setting Up Flask on AWS</title>
        <description>&lt;p&gt;&lt;em&gt;I recently completed the &lt;a href=&quot;http://insightdatascience.com&quot;&gt;Insight Data Science&lt;/a&gt; program, which involved the creation of a data science project from ideation through deployment (if interested, you can see my Insight project &lt;a href=&quot;http://respawninto.bathompso.com&quot;&gt;here&lt;/a&gt;). For deployment, a &lt;a href=&quot;http://flask.pocoo.org&quot;&gt;Flask webapp&lt;/a&gt; was created, and Amazon Web Services (AWS) was used to host it. I found that getting this all set up was one of the hardest things for fellows to accomplish, and recognized a few areas in which it could be improved.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The instructions below are an attempt to improve the instructions for getting a Flask webapp up and running on AWS. While I assume no prior knowledge of Flask, I do no go into any Flask basics here, but that may be a blog post for the future. I will try to go slowly through the steps, and offer plentiful code examples and screenshots. This guide will hopefully serve as a better reference for future Insight sessions.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Creating an AWS Instance&lt;/h2&gt;

&lt;p&gt;First, we must create an AWS virtual machine to copy our files to, and serve our website. To get started, head to &lt;a href=&quot;http://aws.amazon.com&quot;&gt;aws.amazon.com&lt;/a&gt; and click the sign up button in the top right. Then, follow the steps to either sign into your existing Amazon.com account, or create a new one.&lt;/p&gt;

&lt;p&gt;&lt;img style=&quot;width: 100%&quot; src=&quot;/images/aws_flask/start_page.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Unfortunately, I already went through the signup process, so I could not recreate some of the screens. I know you will have to enter your credit card information, but don&amp;#39;t worry, we will only be using the free AWS tier, so you will not be charged. I believe AWS will also ask you what region you want your servers to be in. For convenience, select one of the western US options (I chose Oregon).&lt;/p&gt;

&lt;p&gt;After completing signup, you will be presented with the AWS console screen, with all the products AWS has to offer. What we want to select is EC2, or Elastic Compute Cloud, the first option in the top left.&lt;/p&gt;

&lt;p&gt;&lt;img style=&quot;width: 100%&quot; src=&quot;/images/aws_flask/console.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After selecting EC2, you will be presented with the EC2 console screen, which can also be overwhelming with the number of options to choose from. To get started, select the &amp;quot;Instances&amp;quot; tab on the left sidebar (under the Instances subheader), which will take you to the following screen:&lt;/p&gt;

&lt;p&gt;&lt;img style=&quot;width: 100%&quot; src=&quot;/images/aws_flask/instances.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I already have an instance created for my project, but the list you will see will be empty. Press the blue &amp;quot;Launch Instance&amp;quot; button to set up a new virtual machine for your project. You will immediately be asked to select an operating system, and you should select the &amp;quot;Ubuntu Server&amp;quot; option. As of this writing, the current version is 14.04, but these instructions should still work on future versions.&lt;/p&gt;

&lt;p&gt;Next, you will select what type of instance you wish to create. For the free tier, there is only 1 option available, but there are many beefier virtual machines you could create if you wish to pay for the performance.&lt;/p&gt;

&lt;p&gt;&lt;img style=&quot;width: 100%&quot; src=&quot;/images/aws_flask/instance_type.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Continue through the setup, just clicking the blue continue buttons, until you reach the review step. At this stage, AWS will ask you to create a &amp;quot;key pair,&amp;quot; that you will use to SSH into your instance.&lt;/p&gt;

&lt;p&gt;&lt;img style=&quot;width: 100%&quot; src=&quot;/images/aws_flask/key_pair.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Give it any name you wish (&amp;quot;aws&amp;quot; might be a good name), and click the &amp;quot;Download Key Pair&amp;quot; button. This will download a text file which contains the SSH key necessary to access the instance. &lt;strong&gt;Make sure to back this key file up!&lt;/strong&gt; If you ever lose your key file, you will not be able to enter your instance. Your data will be recoverable, but it will be hassle, and should be avoided at all costs.&lt;/p&gt;

&lt;p&gt;Once the key is downloaded, click the &amp;quot;Launch Instances&amp;quot; button, which should now be available.&lt;/p&gt;

&lt;h2&gt;Setting Up SSH&lt;/h2&gt;

&lt;p&gt;Before we worry about setting our files up on the instance, we should make sure we have easy access to log into the machine.&lt;/p&gt;

&lt;p&gt;First, we need to determine where our virtual machine is. To find your instance&amp;#39;s IP address, click back to the &amp;quot;Instances&amp;quot; tab, and select your instance. In the bottom right will list the IP address of the machine:&lt;/p&gt;

&lt;p&gt;&lt;img style=&quot;width: 100%&quot; src=&quot;/images/aws_flask/instance_ip.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can now use this IP address to log in via SSH. Normally, the login requires a lengthy SSH command:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;ssh -i ~/Downloads/keyfile.pem ubuntu@ip.address.here&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;These commands get even more unwieldy when you try to copy files with &lt;code&gt;scp&lt;/code&gt; or create port tunnels (more on that later). To simplify all future steps, we will create an SSH alias.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Within your home folder is a hidden directory, &lt;code&gt;.ssh&lt;/code&gt;. Within this directory are all the configuration files for SSH connections. As a first step, copy your downloaded &lt;code&gt;*.pem&lt;/code&gt; file to the &lt;code&gt;~/.ssh&lt;/code&gt; directory. *Note: on a Mac, the key is sometimes downloaded as a &lt;code&gt;.pem.txt&lt;/code&gt; file. Remove the &lt;code&gt;.txt&lt;/code&gt; extension before copying.&lt;/li&gt;
&lt;li&gt;We will also need to change the permissions of the downloaded &lt;code&gt;*.pem&lt;/code&gt; file. The key must be unreadable by other users in order to be considered; if it is readable by others it may pose a security risk. To alter the permissions, use the &lt;code&gt;chmod&lt;/code&gt; function: &lt;code&gt;chmod 600 ~/.ssh/keyfile.pem&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Now that the key file is in the right location, and with the right permissions, we can create our alias. to do this, we want to edit the &lt;code&gt;~/.ssh/config&lt;/code&gt; file, which may or may not already exist on your system. Simply run &lt;code&gt;emacs ~/.ssh/config&lt;/code&gt; (or another editor of your choice) to create / edit the file. Add the following entry, substituting the IP address of your instance, and the exact name of your key file:
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;Host aws
    HostName 52.11.150.208
    User ubuntu
    Port 22
    IdentityFile ~/.ssh/aws.pem&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Once the steps are complete, open a new terminal window, and you should be able to access your machine via the simple command: &lt;code&gt;ssh aws&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If this command fails for any reason, double check you completed steps 1 and 2, or troubleshoot the given error (perhaps you entered the wrong name for your keyfile, etc.). Once you can log into your machine, we can proceed.&lt;/p&gt;

&lt;h2&gt;Setting Up The Instance&lt;/h2&gt;

&lt;p&gt;When you enter the instance, it is essentially a blank slate: only a bare-bones Python installation, no packages, and no Flask. We will install the basic components necessary to get a dummy Flask app running before copying over any completed project you may have working locally.&lt;/p&gt;

&lt;p&gt;Python is already installed, but none of the add-on packages. We will want to speed up this process with &lt;code&gt;pip&lt;/code&gt;. It can be installed via:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo apt-get update
sudo apt-get install python-pip&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;These commands will do a &lt;em&gt;bunch&lt;/em&gt; of things, and exit with &lt;code&gt;pip&lt;/code&gt; now installed for use. Next, we will install Flask to get our bare-bones dummy example working&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo pip install flask&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;code&gt;$PYTHONPATH&lt;/code&gt; variable seems to get unset randomly, and causes errors for later steps. To avoid this, add the following line to the top of your &lt;code&gt;~/.bashrc&lt;/code&gt; file:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PYTHONPATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;/usr/lib/python2.7:/usr/lib/python2.7/plat-x86_64-linux-gnu:/usr/lib/python2.7/lib-tk:/usr/lib/python2.7/lib-old:/usr/lib/python2.7/lib-dynload:/usr/local/lib/python2.7/dist-packages:/usr/lib/python2.7/dist-packages:/usr/lib/python2.7/dist-packages/PILcompat&#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2&gt;Creating a Dummy Flask App&lt;/h2&gt;

&lt;p&gt;To create a dummy Flask app, you will need to run the following commands to create the directory structure:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;mkdir dummyapp
mkdir dummyapp/app
mkdir dummyapp/app/static
mkdir dummyapp/app/templates&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This will create a folder, &lt;code&gt;dummyapp&lt;/code&gt;, which will contain all the pieces of our dummy Flask application. A similar process can be followed to put your project webapp into a single folder.&lt;/p&gt;

&lt;p&gt;Next, we will create the necessary python and HTML files for our skeleton app. Remember, to create any file, simply run &lt;code&gt;emacs [filename]&lt;/code&gt;, or any other command line text editor. The names of the following files will be the first line of the code, in a comment:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;c&quot;&gt;# dummyapp/app/__init__.py&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;flask&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Flask&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Flask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;views&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;c&quot;&gt;# dummyapp/app/views.py&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;flask&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;render_template&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@app.route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;/&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;returnDict&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;returnDict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;user&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;Ben&#39;&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;# Feel free to put your name here!&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;returnDict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;title&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;Home&#39;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;render_template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;index.html&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;returnDict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- dummyapp/app/templates/index.html --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;{{ title }} - microblog&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Hello, {{ user }}!&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Once all the files are in place, you should be able to run the app with &lt;code&gt;python run.py&lt;/code&gt; from the main &lt;code&gt;~/dummyapp/&lt;/code&gt; folder. However, the default port 5000 is blocked, so you won&amp;#39;t be able to see it from the outside. To do this, logout of the virtual machine and create a port tunnel &lt;em&gt;from your local machine&lt;/em&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;ssh -L 5000:localhost:5000 aws&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This command takes port 5000 on your local machine, &lt;code&gt;localhost&lt;/code&gt;, and binds it to port 5000 on &lt;code&gt;aws&lt;/code&gt;. It also SSH&amp;#39;s to &lt;code&gt;aws&lt;/code&gt; so that you can run the dummy Flask app from there. Running it this time, and navigating your browser to &lt;code&gt;localhost:5000&lt;/code&gt; should give you the &amp;quot;Hello [Name]&amp;quot; message, and you should see a line print in your terminal from a generic &lt;code&gt;GET&lt;/code&gt; command. Once you&amp;#39;ve verified the dummy app is working, we can move onto making it persistent.&lt;/p&gt;

&lt;h2&gt;Installing Nginx&lt;/h2&gt;

&lt;p&gt;To keep our Flask app running constantly and make sure it can serve a decent number of concurrent users, we will use Nginx, a webserver. It will handle passing traffic from your instance to the Flask web process. To install it, simply run:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo apt-get install nginx&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Once installed, the webserver is automatically running. To check whether it&amp;#39;s working, we&amp;#39;ll have to open up the necessary ports to pass HTTP requests to the virtual machine. To do this, go back to the EC2 console and select the &amp;quot;Security Groups&amp;quot; option in the sidebar, select your instance, then click the &amp;quot;Inbound&amp;quot; tab at the bottom of the page.&lt;/p&gt;

&lt;p&gt;&lt;img style=&quot;width: 100%&quot; src=&quot;/images/aws_flask/security_group.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Click the &amp;quot;Edit&amp;quot; button in the Inbound tab, then add a new rule. Select HTTP from the dropdown menu, and it will automatically open port 80 on your virtual machine.&lt;/p&gt;

&lt;p&gt;&lt;img style=&quot;width: 100%&quot; src=&quot;/images/aws_flask/http_rule.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once the port has been opened, navigate your browser to your instance&amp;#39;s IP address, and you should be greeted by an Nginx welcome message. This message means that the webserver is working, and is ready to be hooked into your Flask app.&lt;/p&gt;

&lt;h2&gt;Configuring uWSGI&lt;/h2&gt;

&lt;p&gt;To hook flask into Nginx, we will be using the python package uWSGI. uWSGI is an alternate web process from the default one used by Flask that makes it easier to connect to Nginx. Unfortunately, the &lt;code&gt;pip&lt;/code&gt; installation of this module always seems to fail, so we use &lt;code&gt;apt-get&lt;/code&gt; instead:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo apt-get install uwsgi-core uwsgi-plugin-python&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Next, we need to make a configuration file so that uWSGI knows the parameters of the Flask app it is serving. To do this, we create a parameter file, which usually has the &lt;code&gt;.ini&lt;/code&gt; suffix. For our example, we can create a &lt;code&gt;uwsgi.ini&lt;/code&gt; file in the &lt;code&gt;dummyapp/&lt;/code&gt; folder, containing the following:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;uwsgi]
home &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; /home/ubuntu/dummyapp
wsgi-file &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; %&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;home&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;/run.py
socket &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 127.0.0.1:3033
callable &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; app
module &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; app
plugin &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; python
pythonpath &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; %&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;home&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
daemonize &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; %&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;home&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;/dummyapp.log
pidfile &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; %&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;home&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;/dummyapp.pid&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Before moving on, I will explain some of the options above:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;home&lt;/code&gt; defines the home directory of the app. This becomes a variable in some of the other options.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;wsgi-file&lt;/code&gt; defines the file that should be run to start the web process. This is, for almost everyone, &lt;code&gt;run.py&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;socket&lt;/code&gt; defines a port on the virtual machine that will pass information between uWSGI and nginx. The port number can be almost anything, as long as it is not used by another program. I recommend using ports 3301-3306, which should be unused by anything else.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;module&lt;/code&gt; defines the name of the folder containing views and templates, in most cases &lt;code&gt;app/&lt;/code&gt;. If you name your folder something else, change this entry to that name.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;daemonize&lt;/code&gt; defines the path to the log file for the Flask app. All lines printed to the console during a normal run of your app will be printed to this file instead. This will allow you to see any error messages or diagnostic print statements in your code.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pidfile&lt;/code&gt; defines the path to a file containing the process ID of the uWSGI process. This file will be used to stop the server when something needs to be changed.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once the uWSGI configuration file is finished, we will have to configure nginx to accept traffic from uWSGI. The configuration file for nginx is located at &lt;code&gt;/etc/nginx/nginx.conf&lt;/code&gt;. First, we need to break nginx&amp;#39;s hold on port 80 (the welcome message you see), and allow uWSGI and Flask to use it. To do this, comment out lines 71 and 72, which should be the first two uncommented lines after a giant commented block.&lt;/p&gt;

&lt;p&gt;Next, we need to tell nginx where to look when it gets traffic from outside sources. Below the lines you just commented out, and still within the &lt;code&gt;html&lt;/code&gt; block, add the following:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;server &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    listen 80;
    location / &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        include uwsgi_params;
        uwsgi_pass 127.0.0.1:3033;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This tells nginx to &amp;quot;listen&amp;quot; on port 80 (the default HTTP port), and pass all that information to uWSGI on port 3033 (make sure to change this port to whatever you specified in the config file).&lt;/p&gt;

&lt;p&gt;Now that we have updated nginx to use the correct parameters, we need to restart it so it re-reads the config file. Do this with:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo service nginx restart&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You should see an &lt;code&gt;[OK]&lt;/code&gt; message, which means that nginx was restarted successfully. Now we need to start the uWSGI process to finish everything off. To do this, simply run:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;uwsgi ~/dummyapp/uwsgi.ini&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now if you point your browser to the IP address of your instance, you should see the hello message from your dummy Flask app. If you do, &lt;strong&gt;congrats, you&amp;#39;re (almost) done!&lt;/strong&gt;. If not, check the log file (&lt;code&gt;~/dummyapp/dummyapp.log&lt;/code&gt;) to see what problems have arisen. Google those error messages to troubleshoot. To stop the uWSGI process, run:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;uwsgi --stop ~/dummyapp/dummyapp.pid&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now that you had a dummy app working, you can begin to copy over your completed app. Make sure to test it before starting into deployment. Run the app interactively first, by calling the &lt;code&gt;run.py&lt;/code&gt; file and checking to see if there are any errors. Most likely, you will have to install many supporting python packages, or recreate your database before the app will run, without complicating the process with uWSGI and nginx.&lt;/p&gt;

&lt;p&gt;After the app is working locally, make sure to create a tunnel on port 5000 and play around with using it. Make sure the app behaves in a reasonable manner, as you will be able to see the error messages easily. Once you&amp;#39;ve confirmed that most functionality is working, recreate the uWSGI configuration file, and start the uWSGI process.&lt;/p&gt;

&lt;h2&gt;Notes&lt;/h2&gt;

&lt;p&gt;One import note on uWSGI is that it does not reload upon changes to your Flask app. If you copy down a new version from github, or make edits to the code locally, you will have to stop and start the uWSGI process for the changes to become live. While this seems strange at first, it is helpful if you accidentally mess something up; your live app won&amp;#39;t see the issue, and you&amp;#39;ll have time to fix things, or roll back, if necessary.&lt;/p&gt;

&lt;p&gt;Nginx allows you to do many advanced and nice things, such as subdomains. If your main site is running at &lt;code&gt;example.com&lt;/code&gt;, you would be able to create another flask app, pass it through a different port to nginx, and serve that app on &lt;code&gt;another.example.com&lt;/code&gt;. This allows you to use your single AWS instance for a whole host of side projects, which is not possible with other Flask web servers.&lt;/p&gt;

&lt;p&gt;Hopefully this walkthrough was easy to follow and understand, and you now have at least a dummy app, but your full project working on AWS. In the near future, I&amp;#39;ll be adding a few more Flask and AWS tricks to this blog, so stay tuned.&lt;/p&gt;
</description>
        <pubDate>Sat, 21 Mar 2015 00:00:00 -0700</pubDate>
        <link>http://bathompso.com/blog/flask-aws-setup/</link>
        <guid isPermaLink="true">http://bathompso.com/blog/flask-aws-setup/</guid>
        
        <category>Data Science</category>
        
        <category>Insight</category>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>#AAS225 and What&#39;s Next</title>
        <description>&lt;p&gt;For those of you who know me personally (or follow me on Twitter), you know that I am currently in Seattle for the American Astronomical Society (AAS) meeting. Tomorrow I&amp;#39;ll be doing a dissertation talk, distilling the entirety of my work at TCU over the past 4 years into a overly-short 15 minute presentation. After the conference, however, I will not be getting on a plane back to DFW, but will instead be headed just a bit down the west coast to San Francisco. I &lt;a href=&quot;/blog/transition-to-data-science/&quot;&gt;previously wrote&lt;/a&gt; about how academia was heading for a breakdown and many scientists were turning to industry for employment. Now I&amp;#39;m one of those scientists.&lt;/p&gt;

&lt;p&gt;Instead of heading back home, I will be living in Palo Alto, CA for 3 months while I attend the &lt;a href=&quot;http://insightdatascience.com&quot;&gt;Insight Data Science Program&lt;/a&gt;. Insight is a 3-month training program that looks for hard-science Ph.D. that wish to transition into the data science industry in Silicon Valley. From what I&amp;#39;ve heard from people at the AAS, it is a very exclusive club, and is extolled by those who know somebody who previously attended.&lt;/p&gt;

&lt;p&gt;The first six weeks of the program involves all of the necessary programming training for a job in the industry. I will pick a public data set and complete an analysis similar to one I would do in a data science job. For the second six weeks, I will interview at top tech companies who sponsor the program: companies like Facebook, LinkedIn, Microsoft, and Jawbone (you can see a full list of the awesome places I could end up on the &lt;a href=&quot;http://insightdatascience.com&quot;&gt;Insight home page&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Attending the conference this week has only solidified my choice to transition into data science. Reading posters on topics completely unrelated to my area of expertise got me excited simply due to the interesting results they achieved. It cemented the fact that I enjoy tackling new challenges and learning new things, regardless of the subject matter I&amp;#39;m working with. I am just as happy to study binary systems (my current area), as I am starspots, or galaxy simulations, or website user data. As long as I&amp;#39;m able to satisfy my curiosity to explore the world around me through data, I will be happy.&lt;/p&gt;

&lt;p&gt;While 2014 was an amazing year for me (I got married!), I believe 2015 will be the best yet. I&amp;#39;m extremely excited for the opportunity to be a part of this highly-regarded program, and thankful to have found a solid path forward after grad school. I will be back in DFW on April 1st, when I&amp;#39;ll defend my Ph.D., and then Chrissy and I will leave sometime in mid- to late May to head out for San Francisco full time.&lt;/p&gt;

&lt;p&gt;Although I haven&amp;#39;t been using it much lately, this blog will be more active while I&amp;#39;m in the program. I&amp;#39;ll be sharing my experiences, as well as the new things I&amp;#39;ve learned, hoping that it might help the next lost astrophysicist (or biologist, or economist, etc.). Look for more good stuff in the coming weeks.&lt;/p&gt;
</description>
        <pubDate>Wed, 07 Jan 2015 00:00:00 -0800</pubDate>
        <link>http://bathompso.com/blog/aas225/</link>
        <guid isPermaLink="true">http://bathompso.com/blog/aas225/</guid>
        
        <category>Research</category>
        
        <category>Data Science</category>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>From Astronomy to Data Science: One Size Fits All?</title>
        <description>&lt;p&gt;Academia has been undergoing a crisis as of late. Many disciplines (even &amp;quot;hot ones,&amp;quot; such as &lt;a href=&quot;http://arstechnica.com/science/2014/04/is-us-biomedical-research-heading-for-a-breakdown/&quot;&gt;biomedical research&lt;/a&gt;) have been finding that they are producing too many short-term jobs (post-docs), and too few permanent positions to sustain the outflow of Ph.D.s.&lt;/p&gt;

&lt;p&gt;Astronomy (my chosen field), is no exception. Heaped on top of this is the fact that as the U.S. government tightens it&amp;#39;s belt, &amp;quot;pure science&amp;quot; budgets, such as those for NASA and NSF&amp;#39;s astronomy grants, are those removed first. As grant money earned is often a metric to determine tenure, this makes it even harder to keep a tenure-track job, if you somehow manage to get one in the first place.&lt;/p&gt;

&lt;p&gt;As I&amp;#39;ve come to terms with this, I&amp;#39;ve begun to look into alternative fields for a career, and data science is one I have seen a lot. But looking into the several &amp;quot;&lt;a href=&quot;http://womeninastronomy.blogspot.com/2013/01/datascience.html&quot;&gt;astronomer to data scientist&lt;/a&gt;&amp;quot; transition &lt;a href=&quot;http://womeninastronomy.blogspot.com/2013/01/astroVdatascience.html&quot;&gt;guides&lt;/a&gt; on the &lt;a href=&quot;http://betterbayes.wordpress.com/2014/07/24/preperation-for-a-transition-to-data-science/&quot;&gt;web&lt;/a&gt;, all seem to tell me the same thing: &amp;quot;learn lots of programming languages, like Python, R or SAS.&amp;quot; &amp;quot;Learn &lt;a href=&quot;http://en.m.wikipedia.org/wiki/NoSQL&quot;&gt;NoSQL&lt;/a&gt;, &lt;a href=&quot;http://hadoop.apache.org&quot;&gt;Hadoop&lt;/a&gt;, and &lt;a href=&quot;http://en.m.wikipedia.org/wiki/Mapreduce&quot;&gt;MapReduce&lt;/a&gt;.&amp;quot; In short, these guides seem to think every data science job is the same: a &amp;quot;big data&amp;quot; scientist at a Silicon Valley startup or tech titan.&lt;/p&gt;

&lt;p&gt;If somebody was preparing for a career in physics and asked you what they should learn to prepare, you wouldn&amp;#39;t necessarily be able to answer. Interested in computational astrophysics? You&amp;#39;ll need to know C or FORTRAN to write highly parallelized codes that run on supercomputers. Interested in engineering? You probably don&amp;#39;t need to spend your time learning general relativity. &amp;quot;Physics&amp;quot; isn&amp;#39;t one thing, and therefore you can&amp;#39;t just prepare in a single way. Data science is exactly the same.&lt;/p&gt;

&lt;p&gt;Instead of prescribing preparation steps for a very specific job, below are some general tips I&amp;#39;ve found in my time exploring the data science market, that everyone should definitely do.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Do some reading on general data science principles.&lt;/strong&gt; Regardless of what subsection of data science you want to go into, everyone should be well-versed in the &amp;quot;fundamental principles.&amp;quot; &lt;a href=&quot;http://www.amazon.com/Data-Science-Business-data-analytic-thinking/dp/1449361323/&quot;&gt;Data Science for Business&lt;/a&gt; is an excellent book on this topic, and I suggest everyone read through it. Not only will it give you an outline of many of the basic data science algorithms, but really hammers in the fact that data science &lt;em&gt;is part of business, not a hard science&lt;/em&gt;. Everything you do should be to further the business goals.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Decide whether data science is really what you want.&lt;/strong&gt; In the last bullet of her &lt;a href=&quot;http://womeninastronomy.blogspot.com/2013/01/astroVdatascience.html&quot;&gt;&amp;quot;Astronomy vs Data Science&amp;quot; post&lt;/a&gt;, Jessica Kirkpatrick states that you cannot dictate the subject matter in industry like you can in academia. As stated above, everything you do in data science should be to further the business goals. This can be an adjustment, as in academia you pick a subject largely unconstrained by others. Make sure this is a trade-off you&amp;#39;re okay with.&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;For me, I enjoy taking (often incomplete) data and telling a story with it. It doesn&amp;#39;t matter what I&amp;#39;m looking at: star brightnesses to determine masses or customer location history to detect fraud, I enjoy any time I am &amp;quot;learning&amp;quot; something. For others, this may not be the case. No matter the benefits of a data science career (salary, locations, job security), doing something you don&amp;#39;t enjoy isn&amp;#39;t the way to go.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Decide what section of data science you want to enhabit.&lt;/strong&gt; Does working for Google or Facebook tracking millions (or billions) of users&amp;#39; behaviors online sound exciting? How about &lt;a href=&quot;http://ars.to/1zc3H6r&quot;&gt;data mining thousands of healthy people&amp;#39;s DNA to improve healthcare&lt;/a&gt;? Maybe you &lt;em&gt;should&lt;/em&gt; look into the &amp;quot;Silicon Valley Big Data&amp;quot; jobs. Maybe you&amp;#39;d like to track how people respond to coupon offers, in order to more fine-tune a company&amp;#39;s marketing strategy? There are many of these &amp;quot;data analyst&amp;quot; positions available as well, and they are usually in high demand all across the country. There are also all kinds of jobs inbetween.&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Do some research on job sites, such as &lt;a href=&quot;http://jobsearch.monster.com/search/data-science_5&quot;&gt;monster&lt;/a&gt; or &lt;a href=&quot;http://www.indeed.com/jobs?q=data+science&amp;amp;l=&quot;&gt;indeed&lt;/a&gt;, to see what data science jobs are out there. Read the job descriptions and requirements to see what types of positions you&amp;#39;re interested in and/or qualified for.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;After doing some background research on what jobs you might want, there are many diverging paths to take. Everyone&amp;#39;s individual preparation method will be different in several areas:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;What programs you&amp;#39;ll need to learn.&lt;/strong&gt; Big Data jobs: definitely brush up on Hadoop, MapReduce, Pig, Hive, etc. Learn a legitimate programming language, like Python. Depending on the company, they may also want an even newer language, like &lt;a href=&quot;http://julialang.org&quot;&gt;Julia&lt;/a&gt;. Going for an analyst position? Make sure you know your SQL backwards and forwards, as many business databases are MySQL. Depending on the company, you may not even need to learn a programming language: all calculations are expected to be in Excel! This doesn&amp;#39;t mean it&amp;#39;s easier, however; learning how to make Excel do advanced things requires just as much time as Python. Maybe even longer!&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Also be aware of how &amp;quot;stats-forward&amp;quot; your potential jobs may be. If you&amp;#39;re going into Big Data, or a data-science-heavy company, you may need to brush up on your statistics in order to understand and implement Bayesian methods. If you&amp;#39;re going into an analyst position, you might not need to know as much, because Bayesian models may hurt your cause, rather than help (see below).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;What methods and algorithms you&amp;#39;ll need to employ.&lt;/strong&gt; Lots of data science is crunching numbers, but that&amp;#39;s not the only thing available. Some data science mines text, for example to detect plagiarism in student papers. If you find many job listingss where this might be a component, you should learn more about Natural Language Processing. Similarly, some data science focuses on images; perhaps automatically comparing signatures on checks or handwriting in documents to detect fraud. Look into image processing algorithms, which may be useful here.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;How you&amp;#39;ll need to communicate.&lt;/strong&gt; &lt;em&gt;All data science should further the business goals&lt;/em&gt; (pound that notion in). Regardless of where you&amp;#39;re working, or what you&amp;#39;re doing, you will &lt;em&gt;always&lt;/em&gt; have to be justifying your thoughts, approach, and implementation to others, higher up. If you cannot sell them on what you&amp;#39;re doing, do not expect to be able to move forward (see how this is different than hard science?). How you have to defend yourself, and what tools you&amp;#39;ll be &amp;quot;allowed&amp;quot; to use, however, will vary greatly from job to job.&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;At a company with a large focus on data science, you may be working with an entire team of data scientists. You may have managers (who themselves are data scientists), who will act as the intermediary between you and the business leaders. You need to sell the managers, who will then take it upon themselves to sell the executives. This is a somewhat easier setup: the people you are directly interfacing with understand data science. You can talk about Bayesian statistics, ensemble methods and specific python modules to bolster your case, and they will be able to speak the same language.&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Going to an analyst position, or a company with a small data science team? You may be speaking directly to executives to sell them on your plan. While more advanced classification schemes, such as Bayes, may provide better results, they may hamper your efforts here, because nobody you&amp;#39;re talking to will understand them! You may be forced to fall back to simple Decision Tree Classifiers, which you can plot, and everyone can understand. Be prepared to &amp;quot;dumb down&amp;quot; your models, or be able to explain them creatively, so that everyone can get on board.&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;This is another area where data science (and business in general) is different than science. In science, you are judged by the quality of your work, and only slightly by how you present it. If you have an amazing find, but you stammer a bit in your talk, or your paper is a little disorganized, you still may be lauded in the scientific community. In business, it&amp;#39;s the opposite: it doesn&amp;#39;t matter whether you found an amazing classification model if you can&amp;#39;t explain it. If you stumble through a meeting with executives, your entire project may be killed, even if it would have saved the company millions of dollars. &lt;em&gt;Practice your public speaking!&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So now that you&amp;#39;ve hammered out your list of things you need to learn, how will you do that? The best option is to look to free online courses, from places like Coursera, or Udacity. Another good option is just search the web for resources on the specific area you want to learn. Hadoop has an &lt;a href=&quot;http://lintool.github.io/Cloud9/&quot;&gt;excellent walkthrough&lt;/a&gt; online, and many of these other advanced tools do as well.&lt;/p&gt;

&lt;p&gt;Not only will you be learning relevant skills for your future job, but you&amp;#39;ll also be proving to a future employer that you &lt;em&gt;can&lt;/em&gt;. I&amp;#39;ve heard from many people in the industry that most of what companies care about are inherent traits, not skills. Sure, being able to check off the list of requirements is good, but they more want to see whether you are a deep quantitative thinker, whether you&amp;#39;re able to carry out independent projects in a timely manner, and whether you&amp;#39;re able to efficiently learn new skills that may be necessary for the job. Show them that you can.&lt;/p&gt;

&lt;p&gt;Lastly, put those skills to use and practice! &lt;a href=&quot;http://www.kaggle.com&quot;&gt;Kaggle.com&lt;/a&gt; has many excellent challenges that give you chances to work on real datasets, and test your algorthims&amp;#39; accuracy. They range in difficulty and approach, providing challenges for any realm of data science you wish to enter. Go check them out!&lt;/p&gt;
</description>
        <pubDate>Tue, 29 Jul 2014 00:00:00 -0700</pubDate>
        <link>http://bathompso.com/blog/transition-to-data-science/</link>
        <guid isPermaLink="true">http://bathompso.com/blog/transition-to-data-science/</guid>
        
        <category>Data Science</category>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Solving Astronomy Software-Rot</title>
        <description>&lt;p&gt;There is a problem in astronomy (probably in other sciences too, but I see it mainly in my field), which I will term &amp;quot;software-rot,&amp;quot; after the better known term &lt;a href=&quot;http://en.wikipedia.org/wiki/Link_rot&quot;&gt;link-rot&lt;/a&gt;. There are several key packages of software that many astronomers rely on to do &lt;strong&gt;basic&lt;/strong&gt; data reduction that are either no longer being developed, or the developer is working on such an old configuration it may as well not be.&lt;/p&gt;

&lt;p&gt;The main offender is most likely &lt;a href=&quot;http://iraf.net&quot;&gt;IRAF&lt;/a&gt;, which every astronomer will tell you they hate, but still install and use it anyway. IRAF is old and clunky, with installation documentation which looks like it is from another decade. The problem was supposed to be fixed with &lt;a href=&quot;http://www.stsci.edu/institute/software_hardware/pyraf&quot;&gt;PyRAF&lt;/a&gt;, but it seems like more of a rewrite of bad code in a new language (python) than an actual solution.&lt;/p&gt;

&lt;p&gt;While I do not work on spectroscopy, a vast majority of the TCU lab focuses on it. One of the main reduction programs in astronomical spectroscopy is &lt;a href=&quot;http://www.as.utexas.edu/%7Echris/moog.html&quot;&gt;Chris Sneden&amp;#39;s MOOG&lt;/a&gt;. This program, one of the most used single software packages in astronomy, is written in FORTRAN-77 which, at 27 years old, is barely supported by the most recent gfortran compiler. A program that is so widely used by astronomy graduate students &lt;strong&gt;shouldn&amp;#39;t be older than the students themselves&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;With IT pushing old machines off the network, the TCU lab is in the process of upgrading every computer from Snow Leopard to Mavericks to future-proof the lab for several years. With this upgrade comes the task of re-compiling all the source code we use on a daily basis. MOOG is one of these programs. Even without the migration, MOOG has been almost impossible to install, and even more trouble comes with the removal of all 32-bit libraries in OS X versions 10.7+.&lt;/p&gt;

&lt;p&gt;Luckily, I found an awesome &lt;a href=&quot;https://github.com/andycasey/moog&quot;&gt;1-click installer for MOOG&lt;/a&gt;, packaged as a Python program. Unfortunately, this program does not compile on Mavericks. So before we upgraded any of our machines, we needed to figure out a way to get MOOG running on 10.9. Fortunately, I discovered how. While the installer for MOOG does not work on Mavericks, it does work on Snow Leopard. And I&amp;#39;ve found that the pre-built binary from a Snow Leopard installation will work and run on a Mavericks computer.&lt;/p&gt;

&lt;p&gt;To get this working on your machines, follow the steps below.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;First, you&amp;#39;ll need access to a OS X 10.6 Snow Leopard machine. This can be in the form of an actual Snow Leopard computer (which we still have around the lab), or a Virtual Machine running Snow Leopard. More recent version of OS X (10.7+) allow for virtualization of Snow Leopard Server (not the client version). If you have an install disk for 10.6 Server, hold onto it, as you can make a Virtual Machine in &lt;a href=&quot;https://www.virtualbox.org&quot;&gt;Virtualbox&lt;/a&gt; or some other virtualization software.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;On your Snow Leopard machine, install XCode. This can be done by either running the XCode installer from the install DVD, or downloading an XCode installer from &lt;a href=&quot;http://developer.apple.com/downloads&quot;&gt;developer.apple.com/downloads&lt;/a&gt;, logging in with your AppleID, and searching for Snow Leopard XCode downloads.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Next you&amp;#39;ll need to download g77, a GNU FORTRAN-77 compiler, which you can find at &lt;a href=&quot;http://hpc.sourceforge.net&quot;&gt;hpc.sourceforge.net&lt;/a&gt;. Make sure to download the intel version, which will extract to &lt;code&gt;g77-intel-bin.tar&lt;/code&gt;. Install the binaries by running &lt;code&gt;sudo tar -xvf g77-intel-bin.tar -C /&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Next, you&amp;#39;ll need to download and install &lt;a href=&quot;http://scisoftosx.dyndns.org&quot;&gt;scisoft&lt;/a&gt;. While scisoft itself is definitely a &amp;quot;software-rot&amp;quot; offender, it&amp;#39;s also the only way to get a (free) version of SuperMongo installed, which is required for MOOG. It&amp;#39;s a monster of a package, and will install a ton of things, but if you&amp;#39;re astronomer you&amp;#39;ll probably want them installed anyway (IRAF and scientific Python installations are also included).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Lastly, you&amp;#39;ll need to download the MOOG 1-click installer from &lt;a href=&quot;https://github.com/andycasey/moog&quot;&gt;github&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now you just need to install MOOG. Within the newly-downloaded moog-master, run &lt;code&gt;sudo python setup.py install&lt;/code&gt;. The build &lt;em&gt;should&lt;/em&gt; run with no errors. The newly-built &lt;code&gt;MOOG&lt;/code&gt; and &lt;code&gt;MOOGSILENT&lt;/code&gt; binares will be located in &lt;code&gt;/usr/local/bin/&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The &lt;code&gt;MOOG&lt;/code&gt; and &lt;code&gt;MOOGSILENT&lt;/code&gt; binaries will work on a Mavericks installation. I believe there is a problem with the install on Mavericks because g77 and the other associated libraries contain only 32bit binaries, which Mavericks does not allow. However, Mavericks has no trouble &lt;em&gt;running&lt;/em&gt; 32bit binaries once they are compiled, and therefore the Snow Leopard-built executables will function properly.&lt;/p&gt;

&lt;p&gt;Before you can run this executable on your Mavericks computer, you&amp;#39;ll have to install a few things. On the new computer you wish to install MOOG on, you&amp;#39;ll have to run a few more steps.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Again, download and install &lt;a href=&quot;http://scisoftosx.dyndns.org&quot;&gt;scisoft&lt;/a&gt; (using a Mavericks version this time). MOOG depends on SuperMongo, and therefore these libraries must exist.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Make sure X11 is installed. Because Apple no longer maintains their X11 application, you&amp;#39;ll have to download and install &lt;a href=&quot;http://xquartz.macosforge.org/landing/&quot;&gt;XQuartz&lt;/a&gt; instead.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When MOOG starts, it writes some data files to a specific directory. In the current install, this directory is located at &lt;code&gt;/.moog&lt;/code&gt;. You will have to create this directory manually and make sure that all users can read and write to it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Lastly, you&amp;#39;ll have to download a &lt;em&gt;modified&lt;/em&gt; version of the 1-click installer from &lt;a href=&quot;https://github.com/bathompso/moog&quot;&gt;my github&lt;/a&gt;, which contains an additional library, &lt;code&gt;libg2c.0.dylib&lt;/code&gt;. Copy this library to &lt;code&gt;/usr/local/lib&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;After all the prerequisites are satisfied, copy over the compiled binaries to somewhere within your path. I chose &lt;code&gt;/usr/local/bin&lt;/code&gt;, as that&amp;#39;s where they were installed on the original Snow Leopard machine.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now you should be able to run a fully-working MOOG program on your less-than-5-years-old OS. On the first run, it may take a &lt;em&gt;long time&lt;/em&gt; for MOOG to initiate X11 (since I run everything through Terminal), or sometimes fail to intitate it at all. It helps to open X11 before initiating the program, as then it will pop up immediately.&lt;/p&gt;

&lt;p&gt;I &lt;strong&gt;strongly suggest&lt;/strong&gt; backing up these executables once you confirm they&amp;#39;re working correctly. This method relies on programs which may no longer exist several years from now, and it&amp;#39;s better to have an archive of the compiled binaries than a walkthrough which sources links that no longer exist.&lt;/p&gt;
</description>
        <pubDate>Tue, 22 Apr 2014 00:00:00 -0700</pubDate>
        <link>http://bathompso.com/blog/moog/</link>
        <guid isPermaLink="true">http://bathompso.com/blog/moog/</guid>
        
        <category>Research</category>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>DAOPHOT</title>
        <description>&lt;p&gt;daophot is a powerful photometry program, written by Peter Stetson. Below will guide you through the steps necessary to obtain magnitudes from your reduced images using daophot and allstar. This guide is essentially a paraphrased version of the full &lt;a href=&quot;http://www.star.bris.ac.uk/%7Embt/daophot/mud9.ps&quot;&gt;user manual&lt;/a&gt;, which you should also take a look at to learn the full capabilities of the program.&lt;/p&gt;

&lt;h2&gt;Step 0: daophot.opt&lt;/h2&gt;

&lt;p&gt;Daophot requires manual entry of several observing parameters before it can make measurements. If you start up daophot from a new terminal window, you will immediately notice a &amp;quot;value unacceptable&amp;quot; error, requiring you to at least enter your instrument&amp;#39;s read noise and gain before showing you a command prompt. To get around this annoying pop-up, we will define our daophot options in a file. By default, daophot looks for a &lt;code&gt;daophot.opt&lt;/code&gt; file in the &lt;strong&gt;current working directory&lt;/strong&gt;. This means that you can specify individual &lt;code&gt;daophot.opt&lt;/code&gt; files for each of your folders, and perhaps vary your parameters between each folder. As we will see later, this may be necessary.&lt;/p&gt;

&lt;p&gt;Everything in daophot is specified by the first two letters of it names. Miraculously (or perhaps by clever planning), every command or option setting is uniquely determined by the two character string. So, in your option file you may write out the full name of the parameter, or simply specify the first two letters. The format of your &lt;code&gt;daophot.opt&lt;/code&gt; file should be &lt;code&gt;option name = value&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Fire up you favorite text editor and make a file called &lt;code&gt;daophot.opt&lt;/code&gt; in the directory you want to run daophot from. Below we will go through the necessary entries to make (at least before running anything in daophot).&lt;/p&gt;

&lt;h4&gt;READ NOISE [RE] and GAIN [GA]&lt;/h4&gt;

&lt;p&gt;The read noise and gain of your instrument are the first two things you should enter into your &lt;code&gt;daophot.opt&lt;/code&gt; file. You will have to look up these values online (or in any reference material you have on your detector). The read noise should be in ADU (sometimes it is specified in electrons, and will have to be converted by dividing by the gain).&lt;/p&gt;

&lt;h4&gt;HIGH GOOD DATUM [HI]&lt;/h4&gt;

&lt;p&gt;This value specifies the highest pixel count that is considered &amp;quot;good&amp;quot;. Look in your detector reference material (you just had it open, right?) for this value. In most cases, the detector has a very high limit (when the counts begin to overrun, etc.), but becomes &lt;em&gt;non-linear&lt;/em&gt; at much smaller counts. It is up to you to decide at what level the non-linearity will become a problem, but you most likely want to set your high good datum value to the point where your detector becomes &amp;gt; 5% non-linear. This makes sure that your stars will always be accurately measured.&lt;/p&gt;

&lt;h4&gt;FWHM [FW]&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/generated/daophot/imexam-600x375.png&quot; style=&quot;float: right&quot; &gt;&lt;/p&gt;

&lt;p&gt;The full-width at half maximum (FWHM) is the next important parameter to set, however getting it will require a bit of work. Open up IRAF and DS9. Then, using &lt;code&gt;imexam&lt;/code&gt;, open up your image. Hovering over a few &lt;strong&gt;semi-bright&lt;/strong&gt; (not really faint, but also not saturated), &lt;strong&gt;isolated&lt;/strong&gt; (not overlapping or very close to any other sources) stars and pressing the &lt;code&gt;a&lt;/code&gt; key will determine their FWHM. In the IRAF output, you will be looking at the &lt;code&gt;MOFFAT&lt;/code&gt; column (see image to the right for what it should look like).&lt;/p&gt;

&lt;p&gt;After running the examination on several stars, press the &lt;code&gt;q&lt;/code&gt; key to quit. Then, take the average of all the values in the &lt;code&gt;MOFFAT&lt;/code&gt; column: this will be your FWHM. The example image to the right, I would set the FWHM to 2.2.&lt;/p&gt;

&lt;p&gt;Other daophot parameters are directly tied to the FWHM, and we can specify them as well after making this measurement. The &lt;strong&gt;FITTING RADIUS [FI]&lt;/strong&gt; should be equal to \( 0.9 \times FWHM \), and the &lt;strong&gt;PSF RADIUS [PS]&lt;/strong&gt; should be equal to \( 4 \times FWHM \).&lt;/p&gt;

&lt;h4&gt;VARIABLE PSF [VA]&lt;/h4&gt;

&lt;p&gt;By default, daophot assumes that the PSF computed for a certain spot on the frame will be valid everywhere. However, due to variations in efficiency across the chip, this is hardly ever the case. The variable PSF parameter tells daophot what order polynomial can be used to vary the PSF over the frame. I usually, by default, set this to &lt;code&gt;2&lt;/code&gt;, allowing for quadratic variation over the entire chip.&lt;/p&gt;

&lt;h4&gt;EXTRA PSF CLEANING PASSES [EX]&lt;/h4&gt;

&lt;p&gt;This parameter allows for multiple iterations of PSF fitting, fine-tuning the fit to get a better result. I have not noticed any increase in computing time, and therefore default to setting it to &lt;code&gt;5&lt;/code&gt;.&lt;/p&gt;

&lt;h4&gt;You&amp;#39;re finally done.&lt;/h4&gt;

&lt;p&gt;After setting all these parameters, you&amp;#39;re ready to start daophot for real. Once you&amp;#39;ve started the program, you can edit any of these paramters by typing &lt;code&gt;OP&lt;/code&gt;, hitting enter twice (to accept KEYBOARD INPUT) and then typing in parameter options. These changes will only live for the current instance of daophot. To change parameters for every run, simply edit your &lt;code&gt;daophot.opt&lt;/code&gt; file.&lt;/p&gt;

&lt;h2&gt;Step 1: ATTACH&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/generated/daophot/start-300x100.png&quot; style=&quot;float: right&quot; &gt;&lt;/p&gt;

&lt;p&gt;Now that your option file is done, start daophot. After opening and displaying your options, daophot will present you with a command prompt. Before daophot can compute anything, you need to tell it &lt;em&gt;what image to look at!&lt;/em&gt; You do this by running the &lt;code&gt;attach&lt;/code&gt; command. daophot will then ask for the image filename (or you can specify it on the same line). Make sure to include the &lt;code&gt;.fits&lt;/code&gt; extension, or daophot may throw an error.&lt;/p&gt;

&lt;p&gt;Another nuance of daophot is that there is a maximum length limit. If you are recieving an error when trying to attach a file (and you&amp;#39;ve made sure to add the &lt;code&gt;.fits&lt;/code&gt; extension), it may be because your file path is too long. This can be solved by either (a) starting daophot from a lower directory (if you&amp;#39;re passing through multiple folders), or (b) renaming the image to a smaller file name.&lt;/p&gt;

&lt;p&gt;After attaching the image successfully, daophot will print the image dimensions.&lt;/p&gt;

&lt;h2&gt;Step 2: FIND&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/generated/daophot/find-300x167.png&quot; style=&quot;float: right&quot; &gt;&lt;/p&gt;

&lt;p&gt;After attaching the image, we will task daophot to detect all the stars in the frame. We do this by running the &lt;code&gt;find&lt;/code&gt; command. Before running, daophot will ask for the number of frames &amp;#39;averaged, summed&amp;#39;. If this is a single image, then your input should be &lt;code&gt;1,1&lt;/code&gt;. If you averaged a number of frames to create the image you are working on, enter that value as the first number in the list (say, &lt;code&gt;5,1&lt;/code&gt;, etc.). If you &lt;em&gt;median-combined&lt;/em&gt; frames into the image you are working on (what I always do), then enter 2/3&lt;sup&gt;rds&lt;/sup&gt; the number of combined frames as the first number in the list (e.g. &lt;code&gt;3.3,1&lt;/code&gt; if you median combined 5 images).&lt;/p&gt;

&lt;p&gt;Hit enter to confirm the default filename for the &lt;code&gt;find&lt;/code&gt; output (a .coo file). daophot will then spit out a bunch of output, followed by a prompt asking whether you are happy with it (see the picture to the right). Just enter &lt;code&gt;y&lt;/code&gt; for now, we will re-run this command in a bit. One of the parameters we did not set in Step 0 is the THRESHOLD, which specifies the lowest count source that will detected as a star, in sigmas above the mean. Using the newly generated .coo file, we will determine the best THRESHOLD level.&lt;/p&gt;

&lt;p&gt;First, re-open your image file and look for the faintest star you can find. Determine the number of counts in the center of this star. Using the parameter table in the top 2 lines of your .coo file, look at the THRESH value used by FIND. The THRESH value, which is in ADU, scales nearly linearly with the THRESHOLD option, in sigma. The default value of THRESHOLD is 4. Add the adjusted value of the THRESHOLD value to your option file, exit daophot and start it again. Run the same steps as above (ATTACH, FIND) and re-inspect the .coo file. Keep iterating until the THRSHOLD value you&amp;#39;ve specified gives you the expected THRESH value in the .coo file.&lt;/p&gt;

&lt;h2&gt;Step 3: PHOT&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/generated/daophot/phot-300x185.png&quot; style=&quot;float: right&quot; &gt;&lt;/p&gt;

&lt;p&gt;After detecting every possible star in the frame, we get rough magnitudes for each star using aperture photometry. Before running the aperture photometry command, &lt;code&gt;phot&lt;/code&gt;, we need to make another option file. This aperture photometry option file &lt;code&gt;photo.opt&lt;/code&gt; uses the same format as &lt;code&gt;daophot.opt&lt;/code&gt;: &lt;code&gt;parameter = value&lt;/code&gt;. Although there is lots you can do with this file, right now we only need 3 lines: the aperture and the sky annulus. The aperture, called &lt;code&gt;A1&lt;/code&gt;, should have a value the same as your FWHM. This aperture will allow in the most light from the star, while also removing a large amount of sky noise. The other two lines in your &lt;code&gt;photo.opt&lt;/code&gt; file, which denote your sky annulus, are called &lt;code&gt;IS&lt;/code&gt; and &lt;code&gt;OS&lt;/code&gt; (the inner and outer sky radius). I usually just choose &lt;code&gt;IS = 10&lt;/code&gt; and &lt;code&gt;OS = 20&lt;/code&gt;. As aperture photometry for daophot is simply a reference value, and not the final results, we don&amp;#39;t care too much about these sky radius values.&lt;/p&gt;

&lt;p&gt;After creating your &lt;code&gt;photo.opt&lt;/code&gt; file, run the &lt;code&gt;phot&lt;/code&gt; command. It should read in your option file and populate &lt;code&gt;A1&lt;/code&gt;, &lt;code&gt;IS&lt;/code&gt;, and &lt;code&gt;OS&lt;/code&gt; values. To run, simply press enter. Use the default file paths, specifying the input as your .coo file, and make a .ap aperture photometry file. After printing out a bunch more output, the &lt;code&gt;phot&lt;/code&gt; command will estimate your limiting magnitude.&lt;/p&gt;

&lt;h2&gt;Step 4: PICK&lt;/h2&gt;

&lt;p&gt;After doing aperture photometry on everything, we move onto PSF photometry. As you know, PSF photometry fits a mathematical profile to some model stars, then uses that profile to estimate stellar magnitudes by fitting that model to all sources. Before we can get the magnitudes, we first need to pick the model stars which will create our PSF shape.&lt;/p&gt;

&lt;p&gt;To generate this list, run the &lt;code&gt;pick&lt;/code&gt; command in daophot, feeding it the .ap file we generated in the previous step. &lt;code&gt;pick&lt;/code&gt; will then ask you for the desired number of stars, as well as a limiting magnitude. As a rule of thumb, every frame should never start with less than approximately 100 PSF stars. As your frame gets bigger (\( 0.25^\circ \) or above), the number of PSF stars should increase. A rule of thumb is 1000 PSF stars per square degree. Scale up or down as necessary, keeping in mind that 100 should be the minimum.&lt;/p&gt;

&lt;p&gt;Your limiting magnitude should be approximately 1-2 magnitudes above the limiting magnitude specified by &lt;code&gt;phot&lt;/code&gt;. If your limiting magnitude is too low, &lt;code&gt;pick&lt;/code&gt; will not be able to find enough stars, and you should run &lt;code&gt;pick&lt;/code&gt; again with a higher limiting magnitude until you&amp;#39;re able to get the desired number of stars.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;pick&lt;/code&gt; will generate a .lst file containing infomation on all the model PSF stars. Open this file and take a look at it. You will need to keep it open for the next step.&lt;/p&gt;

&lt;h2&gt;Step 5: PSF&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/generated/daophot/badpsf-close-300x212.png&quot; style=&quot;float: right&quot; &gt;&lt;/p&gt;

&lt;p&gt;Now that we have a list of model PSF stars, we need to compute it. This is done by running the &lt;code&gt;psf&lt;/code&gt; command. Feed &lt;code&gt;psf&lt;/code&gt; your .ap and .lst files, and save your new PSF to a .psf file.&lt;/p&gt;

&lt;p&gt;After entering all your file choices, daophot will begin showing you ASCII pictures of all of the model PSF stars. It will be up to you to determine whether each of the stars is a suitable choice. Remember, PSF model stars should not be:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Saturated&lt;/strong&gt;: your high good datum option should take care of this, but if daophot gives you a warning about the star containing a high pixel, make sure to not choose it.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Around bad pixels&lt;/strong&gt;: if daophot gives you a warning about bad pixels (or high pixels, or low pixels), do not choose it.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Is too close to another star&lt;/strong&gt;: if, in the ASCII image, you see more than one star, do not choose it. A close-by second star will contaminate the PSF fit, because it will attempt to fit both as if they were a single source. The image to the right shows a model star which is too close to other stars in the frame. Make sure to reject these.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Is generally wonky&lt;/strong&gt;: if there&amp;#39;s something else wrong with the image you see (there isn&amp;#39;t a star there, the star is stretched out, etc.), be on the safe side and remove it. While 100 is the minimum for the &lt;em&gt;starting&lt;/em&gt; number of PSF model stars, the minimum number of &lt;em&gt;actual&lt;/em&gt; PSF model stars is lower, probably about 50. As long as you have more than that, your fit should be fine.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As you are going through these star pictures, keep your .lst file open. Whenever you reject a star, find the associated line in the .lst file. The first number in the array underneath the picture is the star ID. Use this ID to find the star in the .lst file, and delete the line. This is generally a good practice, as subsequent runs of PSF will go much faster.&lt;/p&gt;

&lt;h2&gt;Step 6: PSF (again)&lt;/h2&gt;

&lt;p&gt;After completing the tedious task of accepting or rejecting all the stars in your .lst file, you&amp;#39;ll be presented with a computation of the final statistics. In the resulting table, you&amp;#39;ll see a list of stars and their associated profile errors, with some marked as &lt;code&gt;?&lt;/code&gt; or &lt;code&gt;*&lt;/code&gt;. These marked stars are those that are 1 or 2+ standard deviations above the mean, and should be rejected as being outliers. Find these star lines in the .lst file and delete them as well.&lt;/p&gt;

&lt;p&gt;Now it&amp;#39;s time to run &lt;code&gt;psf&lt;/code&gt; again. No, this time you won&amp;#39;t have to tediously mark everything as good (although you can if you really want). Before running the &lt;code&gt;psf&lt;/code&gt; command, edit your options again (type &lt;code&gt;opt&lt;/code&gt;, then enter). Change the WATCH STATUS parameter to -1. WATCH PROGRESS is an indicator of the amount of output you wish to recieve. Anything less than 0 means to output the least output possible, sometimes almost nothing. When &lt;code&gt;psf&lt;/code&gt; is run with a negative WATCH PROGRESS parameter, everything in the .lst file is marked as accepted without any further input. This is fine, because we&amp;#39;ve already ensured that everything in the file is good.&lt;/p&gt;

&lt;p&gt;After changing your options, run &lt;code&gt;psf&lt;/code&gt; again. Do &lt;strong&gt;not&lt;/strong&gt; use the default file options, but instead use what we did before: the .ap file. After entering all the file names (or just using the default .lst and .psf options), all the statistics will be shown again. If there are still stars with &lt;code&gt;?&lt;/code&gt; or &lt;code&gt;*&lt;/code&gt;, remove them from the .lst file and run PSF again. Keep iterating like this until no more stars show these symbols.&lt;/p&gt;

&lt;p&gt;After everything is complete, look back at your .lst file. Make sure that, at minimum it has more than half of the number of PSF model stars you started with. If it doesn&amp;#39;t, go back to Step 4 (the &lt;code&gt;pick&lt;/code&gt; command, with WATCH PROGRESS = 1). Keep choosing more stars until you have half of the target number of PSF stars. This &amp;quot;half number&amp;quot; is chosen from your original guess: if you start with 100 stars, but end with 40 and pick 200 instead, you only need to have 50 at the end, not 100. If you make the half value a moving target, you may never get there!&lt;/p&gt;

&lt;h2&gt;Step 7: allstar&lt;/h2&gt;

&lt;p&gt;Now that we have computed our PSF fit, we need to apply that model to all the stars in our frame and determine magnitudes. This &lt;em&gt;can&lt;/em&gt; be done in daophot, but it is actually a more easily implemented task of the companion program allstar.&lt;/p&gt;

&lt;p&gt;Before you run allstar, you need to make an option file (everything in the daophot suite needs one), &lt;code&gt;allstar.opt&lt;/code&gt;. This option file will only need 4 values, though:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;FIT RADIUS [FI]&lt;/strong&gt; Set the fit radius parameter to the same value you have in your &lt;code&gt;daophot.opt&lt;/code&gt; file: \( 0.9 \times FWHM \).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;WATCH PROGRESS [WA]&lt;/strong&gt; Set this parameter to 0. We don&amp;#39;t need any of the output, since our input PSF has already been tested.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;IS / OS&lt;/strong&gt; Set the inner and outer sky radius to the ssame values in &lt;code&gt;photo.opt&lt;/code&gt;: as a default, I set them to 10 and 20, respectively.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once you save this option file, run allstar. It will ask for the image name, and the default options for input file (.ap), PSF file (.psf) and output (.als) are acceptable. allstar will show a progress message as it computes PSF magnitudes, and may take a while to run. Wait for all the star to converge or be tossed out, and you will have your final PSF photometry magnitudes.&lt;/p&gt;
</description>
        <pubDate>Mon, 07 Apr 2014 00:00:00 -0700</pubDate>
        <link>http://bathompso.com/education/obsastro/daophot/</link>
        <guid isPermaLink="true">http://bathompso.com/education/obsastro/daophot/</guid>
        
        
        <category>education</category>
        
        <category>obsastro</category>
        
      </item>
    
      <item>
        <title>Big Bang breakthrough: astronomers report signs of the universe&#39;s creation</title>
        <description>&lt;p&gt;&lt;a href=&quot;http://www.theverge.com/2014/3/17/5518346/first-evidence-gravitational-waves-supports-big-bang-inflation&quot;&gt;Astronomers, using a small telescope in the South Pole have made an amazing discovery&lt;/a&gt;. If this finding turns out to be real (via confirmation from another observatory), it may well be the most important astronomical breakthrough of this century. The detected signal not only would be, I believe, the first measurement of &lt;a href=&quot;http://en.wikipedia.org/wiki/Gravitational_wave&quot;&gt;gravitational waves&lt;/a&gt;, but also a confirmation of [cosmic Inflation](http://en.wikipedia.org/wiki/Inflation_(cosmology)).&lt;/p&gt;

&lt;p&gt;Inflation was mainly &amp;quot;invented&amp;quot; to solve several cosmological problems: the flatness of the Universe and the uniformity of the &lt;a href=&quot;http://en.wikipedia.org/wiki/Cosmic_microwave_background&quot;&gt;CMB&lt;/a&gt;. It completely explained those, but it still was essentially a &amp;quot;made up&amp;quot; fix. If this confirmation is true, it would finally cement Inflation as a certified Theory, instead of a &amp;quot;thought experiment&amp;quot; solution to our cosmological observations.&lt;/p&gt;

&lt;p&gt;Now that Inflation has been (supposedly) confirmed true, I hope we can do the same with the two existing cosmological &amp;quot;fudge factors&amp;quot;: dark matter and dark energy. Now &lt;strong&gt;that&lt;/strong&gt; would actually be the most important cosmological breakthrough of this century.&lt;/p&gt;
</description>
        <pubDate>Fri, 21 Mar 2014 00:00:00 -0700</pubDate>
        <link>http://bathompso.com/blog/inflation/</link>
        <guid isPermaLink="true">http://bathompso.com/blog/inflation/</guid>
        
        <category>Science</category>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Google Moving Forward With Project Ara</title>
        <description>&lt;p&gt;I was &lt;a href=&quot;http://bathompso.com/blog/project-ara/&quot;&gt;initially skeptical&lt;/a&gt; (and still am) of Project Ara&amp;#39;s viability, it looks like Google is &lt;a href=&quot;http://www.theverge.com/2014/2/27/5452770/project-ara-smartphone-release-date-price-google-estimate&quot;&gt;moving forward with the project&lt;/a&gt;, with some suggesting that devices might go on sale in the next year. This could be a huge shift in how mobile is done, and is at least an innovative product coming out of somebody in the smartphone space.&lt;/p&gt;

&lt;p&gt;The biggest impact for me, and one of the coolest aspects of Project Ara, is that most (if not all) of the components will be 3D printed. You will customize your phone using an app, or a console on the Project Ara printer, then all modules will be printed and spit out for you to connect together into your phone. Similarly, individual modules can be chosen and printed for select upgrades. This is awesome for me as 3D Systems (of which I own some stock), is a partner of Google in this endeavour. If Google plans on shipping out 3D Systems&amp;#39; printers across the globe for use in Project Ara, this could have a huge upside for them.&lt;/p&gt;

&lt;p&gt;Regardless of the financial gains for 3D Systems, I am interested to see if and how this project moves forward. And if they &lt;strong&gt;are&lt;/strong&gt; selling basic level phones for $50, I might go and pick one up. Perfect travel phone?&lt;/p&gt;
</description>
        <pubDate>Thu, 27 Feb 2014 00:00:00 -0800</pubDate>
        <link>http://bathompso.com/blog/project-ara-2/</link>
        <guid isPermaLink="true">http://bathompso.com/blog/project-ara-2/</guid>
        
        <category>Technology</category>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Why I Shifted from Wordpress.org to Jekyll</title>
        <description>&lt;p&gt;A personal website is useful in the current age, both as a marketing mechanism for me, and an outlet for things I want to share with everyone. Perhaps not many people read my blog posts, but my &lt;a href=&quot;http://github.com/bathompso&quot;&gt;research code&lt;/a&gt; and my &lt;a href=&quot;http://bathompso.com/education/&quot;&gt;class outlines&lt;/a&gt; will hopefully be used by others.&lt;/p&gt;

&lt;h3&gt;First Attempt&lt;/h3&gt;

&lt;p&gt;My first attempt at a website involved me coding the entire thing (HTML, CSS, JavaScript) from scratch. This not only made it so that I could make the site I wanted, but also as a learning experience for me. I&amp;#39;m proud to say my web skills are better than a novice due to me struggling through building an entire site from the ground up.&lt;/p&gt;

&lt;p&gt;There were several problems with this approach:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It takes &lt;em&gt;forever&lt;/em&gt; to code pages from scratch. Partly because I didn&amp;#39;t know a ton of HTML at the time, but also because I&amp;#39;m not a designer. I could never get things quite right, and it was hard settling on a design.&lt;/li&gt;
&lt;li&gt;When I wanted to change the design or some other element, it also took a ton of time to manually change every page. But, by coding everything by hand, there wasn&amp;#39;t a way to template anything.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To avoid this massive time sink, I actually coded a manual template engine by making a Perl script which formatted plain text blog posts into web pages. The Perl script would convert each text file on-the-fly. It seems a bit ridiculous, but it was the only way I could figure out how to do it all on my own.&lt;/p&gt;

&lt;h3&gt;WordPress&lt;/h3&gt;

&lt;p&gt;After a whole of having a hand-coded site that I never really loved, I went completely the other direction: Wordpress.org&lt;/p&gt;

&lt;p&gt;I self-hosted the wordpress-generated site on one of the many computers in my control, forwarding my domain to my home IP.&lt;/p&gt;

&lt;p&gt;Wordpress is awesome in the fact that it does &lt;strong&gt;everything&lt;/strong&gt; for you. There are thousands of themes, which make things look 1000x times better than what I could implement, and has hundreds of plugins that handle any other task you could think of. Collapsible text sections? Easy. Really fancy, touch-enabled jquery slider? Done. For a long time I appreciated this ease of use, but not everything was perfect.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The internet connection to my house is less than stellar through &lt;a href=&quot;http://clear.com&quot;&gt;Clear&lt;/a&gt;, and I have no intention of paying money to put it on a external host. This meant that many of my hi-res images would take quite a while to load, regardless of the user&amp;#39;s Internet speed.&lt;/li&gt;
&lt;li&gt;All day I work on editing text files in full-screen BBEdit, which nicely aligns all my text, syntax highlights, and is easy to use. The wordpress web-interface has a full-screen mode, but it still leaves much to be desired. There are available apps to do editing, but all look like they haven&amp;#39;t been updated since Mac OS X Leopard.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Jekyll&lt;/h3&gt;

&lt;p&gt;My friend Brian recently put &lt;a href=&quot;http://jekyllrb.com&quot;&gt;Jekyll&lt;/a&gt; on my radar by wanting to use it for a big project at work, and I began to play around with it. Jekyll is a blog-centric web creation tool. It allows you to make template HTML files, which have content fed to them from various &lt;a href=&quot;http://daringfireball.net/projects/markdown/&quot;&gt;markdown&lt;/a&gt; files. It then converts all the templates, markdown, and other files into a site of static HTML images. No database queries like wordpress or others, which makes it naturally faster to load and less strenuous on any hosting system.&lt;/p&gt;

&lt;p&gt;Because everything is a text file (HTML or markdown), I can edit it in anything I want. BBEdit on my Mac, and the awesome &lt;a href=&quot;http://bywordapp.com&quot;&gt;ByWord app&lt;/a&gt; on my iPhone and iPad (I&amp;#39;m using the iPhone app right now). Way better than the subpar Wordpress web editor and questionable iOS apps.&lt;/p&gt;

&lt;p&gt;Another great plus of Jekyll is that it is in the good graces of the GitHub gods. GitHub launched a cool new initiative called GitHub pages, where GitHub will give you free hosting if you sign up (username.github.io). Of course, this would never work with Wordpress as it requires a database, but Jekyll sites, since they&amp;#39;re all static, will work perfectly fine. Additionally, github will host all your pre-compiled Jekyll files, so you don&amp;#39;t even have to run that compilation yourself.&lt;/p&gt;

&lt;p&gt;With my site now being hosted via GitHub instead of through my slow connection, large images will load almost instantly instead of several seconds.&lt;/p&gt;

&lt;p&gt;There are lots of other considerations as well:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Security: no longer do I have to worry about security updates and vulnerabilities in my wordpress-hosting computer. Everything public-facing is on a separate server, not a tunnel into all my devices.&lt;/li&gt;
&lt;li&gt;Style Sheets: instead of giant, clunky CSS files, I can write all of my styles in &lt;a href=&quot;http://sass-lang.com&quot;&gt;SASS&lt;/a&gt; and have it compiled into a mini-fied CSS file through &lt;a href=&quot;http://incident57.com/codekit/&quot;&gt;Code Kit&lt;/a&gt;. Variables and nested styles!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While it took a while to transfer my &lt;a href=&quot;http://wordpress.org/themes/origin&quot;&gt;Wordpress Theme&lt;/a&gt; to Jekyll, now that it&amp;#39;s there it&amp;#39;s mostly smooth sailing. Still missing a few pages, but those will easily be converted over in the coming week or so. And future additions to my Education and Research sections will be a lot easier thanks to the markdown content.&lt;/p&gt;
</description>
        <pubDate>Fri, 07 Feb 2014 00:00:00 -0800</pubDate>
        <link>http://bathompso.com/blog/migrating-to-jekyll/</link>
        <guid isPermaLink="true">http://bathompso.com/blog/migrating-to-jekyll/</guid>
        
        <category>Technology</category>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>The Problem with New Methods</title>
        <description>&lt;p&gt;My research involves detecting binary star systems in star clusters. Binary star systems are systems where two stars are orbiting each other. The most famous binary system is Tatooine from Star Wars, with its &lt;a href=&quot;http://thethoughtstash.files.wordpress.com/2011/01/sw_binary_sunset.jpg?w=500&amp;amp;#038;h=281&quot;&gt;famous double sunset&lt;/a&gt;. The &amp;quot;closest star to the Sun,&amp;quot; Alpha Centauri, is actually a binary system as well (and even has a third star orbiting it further out!)&lt;/p&gt;

&lt;p&gt;The number of binary systems in a cluster are very important for numerical simulations, as are the masses of the stars in the system. The results from this research have implications for simulations of galactic evolution, and will be fully explained on a devoted page here sometime soon.&lt;/p&gt;

&lt;p&gt;My method of detecting binary systems involves imaging the star cluster using several different &lt;em&gt;filters&lt;/em&gt;. Filters only allow specific wavelengths of light through to the telescope (e.g. only Red light, only Green light, etc.). Using these images, we can determine not only which of the points of light we see that are binary systems instead of a single star, but also what the masses of each star is. The problem with new method is, however, that you can&amp;#8217;t trust the results coming out of it until you compare it to known results from other methods. As I am planning to present my research at the upcoming &lt;a href=&quot;http://aas.org/meetings/223rd-aas-meeting-washington-dc&quot;&gt;Winter 2014 American Astronomical Society meeting&lt;/a&gt; in DC, I needed to find an older dataset to compare my results to.&lt;/p&gt;

&lt;p&gt;One of the clusters in my data, NGC 188 (pictured above), has other data on it using radial velocities (RVs), the established method of detecting binary systems. Here, astronomers measure the speed at which a star in the cluster is moving towards or away from us at various points in time. Single stars won&amp;#8217;t change their speed, whereas binary systems will oscillate as they orbit each other. By taking enough measurements, one can determine the orbit of each star and determine stellar mass. &lt;strong&gt;[Note: It is more complicated than this is general. There will also be a page on this concept in the future]&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The RV data used was from &lt;a href=&quot;http://adsabs.harvard.edu/abs/2009AJ....137.3743G&quot;&gt;Geller et al. (2009)&lt;/a&gt;. For reference, it contains RV measurements from December 1973 to August 2008. This dataset, which I am hoping to duplicate by comparing results &lt;em&gt;took 35 years to create.&lt;/em&gt; This is, in fact, the problem with RV studies: to characterize orbits and determine masses, you have to observe over a very long time. The input into my code was measurements from 12 images. If you could get observing time on the right instruments, gathering the data would only take 5 nights.&lt;/p&gt;

&lt;p&gt;My method involves comparing observed stars to models, and I used three different ones to see how that affected the determined mass. I found that all three models did very well, as seen below. For clarification on the terminology, the &lt;em&gt;primary&lt;/em&gt; star is the larger star in the binary system, and the &lt;em&gt;secondary&lt;/em&gt; is the smaller.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/bincompare.png&quot; style=&quot;width: 100%;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;When I started out, I was hoping for 5-10% accuracy for the primary and 10-20% accuracy for the secondary. For these stars, it looks like we are within that range.&lt;/p&gt;

&lt;p&gt;This comparison will enhance any results on future clusters, a few of which will also be presented at this year&amp;#39;s AAS.&lt;/p&gt;
</description>
        <pubDate>Tue, 17 Dec 2013 00:00:00 -0800</pubDate>
        <link>http://bathompso.com/blog/problem-with-new-methods/</link>
        <guid isPermaLink="true">http://bathompso.com/blog/problem-with-new-methods/</guid>
        
        <category>Research</category>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>3D Systems to Manufacture Project Ara&amp;#8217;s Modular Smartphones</title>
        <description>&lt;p&gt;&lt;a href=&quot;http://www.theverge.com/2013/11/22/5133522/motorola-signs-project-ara-manufacturing-partner&quot;&gt;Motorola is moving forward with their Project Ara modular cell phone initiative.&lt;/a&gt; While I don&amp;#8217;t think the idea of a modular cell phone will ever take off, there are benefits in exploring the tech. Perhaps studying ways to modularize a cell phone will lead to improvements in antenna, battery or screen technology, which would benefit the smartphone market as a whole.&lt;/p&gt;

&lt;p&gt;As a stockholder of 3D Systems (DDD), I&amp;#8217;m happy to see them chasing new markets as well. While they are one of the major players in the 3D printing industry, they could open up a large new revenue stream if Project Ara smartphones ever get off the ground.&lt;/p&gt;

&lt;p&gt;If they could also figure out a way to 3D print some of the components, that would be a future I&amp;#8217;m interested in.&lt;/p&gt;
</description>
        <pubDate>Sat, 23 Nov 2013 00:00:00 -0800</pubDate>
        <link>http://bathompso.com/blog/project-ara/</link>
        <guid isPermaLink="true">http://bathompso.com/blog/project-ara/</guid>
        
        <category>Article</category>
        
        <category>Technology</category>
        
        
        <category>blog</category>
        
      </item>
    
  </channel>
</rss>
